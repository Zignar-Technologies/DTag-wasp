// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

#![allow(dead_code)]
#![allow(unused_imports)]

use priceoracle::*;
use wasmlib::*;

use crate::consts::*;
use crate::events::*;
use crate::params::*;
use crate::results::*;
use crate::state::*;

mod consts;
mod contract;
mod events;
mod params;
mod results;
mod state;

mod priceoracle;

const EXPORT_MAP: ScExportMap = ScExportMap {
    names: &[
    	FUNC_APPROVE_ORACLE,
    	FUNC_INIT,
    	FUNC_SET_MIOTA_PRICE,
    	FUNC_SET_OWNER,
    	VIEW_GET_MIOTA_PRICE,
    	VIEW_GET_OWNER,
	],
    funcs: &[
    	func_approve_oracle_thunk,
    	func_init_thunk,
    	func_set_miota_price_thunk,
    	func_set_owner_thunk,
	],
    views: &[
    	view_get_miota_price_thunk,
    	view_get_owner_thunk,
	],
};

#[no_mangle]
fn on_call(index: i32) {
	ScExports::call(index, &EXPORT_MAP);
}

#[no_mangle]
fn on_load() {
    ScExports::export(&EXPORT_MAP);
}

pub struct ApproveOracleContext {
	events:  priceoracleEvents,
	params: ImmutableApproveOracleParams,
	state: MutablepriceoracleState,
}

fn func_approve_oracle_thunk(ctx: &ScFuncContext) {
	ctx.log("priceoracle.funcApproveOracle");
	let f = ApproveOracleContext {
		events:  priceoracleEvents {},
		params: ImmutableApproveOracleParams { proxy: params_proxy() },
		state: MutablepriceoracleState { proxy: state_proxy() },
	};

	// current owner of this smart contract
	let access = f.state.owner();
	ctx.require(access.exists(), "access not set: owner");
	ctx.require(ctx.caller() == access.value(), "no permission");

	ctx.require(f.params.agentid().exists(), "missing mandatory agentid");
	func_approve_oracle(ctx, &f);
	ctx.log("priceoracle.funcApproveOracle ok");
}

pub struct InitContext {
	events:  priceoracleEvents,
	params: ImmutableInitParams,
	state: MutablepriceoracleState,
}

fn func_init_thunk(ctx: &ScFuncContext) {
	ctx.log("priceoracle.funcInit");
	let f = InitContext {
		events:  priceoracleEvents {},
		params: ImmutableInitParams { proxy: params_proxy() },
		state: MutablepriceoracleState { proxy: state_proxy() },
	};
	func_init(ctx, &f);
	ctx.log("priceoracle.funcInit ok");
}

pub struct SetMiotaPriceContext {
	events:  priceoracleEvents,
	params: ImmutableSetMiotaPriceParams,
	state: MutablepriceoracleState,
}

fn func_set_miota_price_thunk(ctx: &ScFuncContext) {
	ctx.log("priceoracle.funcSetMiotaPrice");
	let f = SetMiotaPriceContext {
		events:  priceoracleEvents {},
		params: ImmutableSetMiotaPriceParams { proxy: params_proxy() },
		state: MutablepriceoracleState { proxy: state_proxy() },
	};
	ctx.require(f.params.price().exists(), "missing mandatory price");
	func_set_miota_price(ctx, &f);
	ctx.log("priceoracle.funcSetMiotaPrice ok");
}

pub struct SetOwnerContext {
	events:  priceoracleEvents,
	params: ImmutableSetOwnerParams,
	state: MutablepriceoracleState,
}

fn func_set_owner_thunk(ctx: &ScFuncContext) {
	ctx.log("priceoracle.funcSetOwner");
	let f = SetOwnerContext {
		events:  priceoracleEvents {},
		params: ImmutableSetOwnerParams { proxy: params_proxy() },
		state: MutablepriceoracleState { proxy: state_proxy() },
	};

	// current owner of this smart contract
	let access = f.state.owner();
	ctx.require(access.exists(), "access not set: owner");
	ctx.require(ctx.caller() == access.value(), "no permission");

	ctx.require(f.params.owner().exists(), "missing mandatory owner");
	func_set_owner(ctx, &f);
	ctx.log("priceoracle.funcSetOwner ok");
}

pub struct GetMiotaPriceContext {
	results: MutableGetMiotaPriceResults,
	state: ImmutablepriceoracleState,
}

fn view_get_miota_price_thunk(ctx: &ScViewContext) {
	ctx.log("priceoracle.viewGetMiotaPrice");
	let f = GetMiotaPriceContext {
		results: MutableGetMiotaPriceResults { proxy: results_proxy() },
		state: ImmutablepriceoracleState { proxy: state_proxy() },
	};
	view_get_miota_price(ctx, &f);
	ctx.results(&f.results.proxy.kv_store);
	ctx.log("priceoracle.viewGetMiotaPrice ok");
}

pub struct GetOwnerContext {
	results: MutableGetOwnerResults,
	state: ImmutablepriceoracleState,
}

fn view_get_owner_thunk(ctx: &ScViewContext) {
	ctx.log("priceoracle.viewGetOwner");
	let f = GetOwnerContext {
		results: MutableGetOwnerResults { proxy: results_proxy() },
		state: ImmutablepriceoracleState { proxy: state_proxy() },
	};
	view_get_owner(ctx, &f);
	ctx.results(&f.results.proxy.kv_store);
	ctx.log("priceoracle.viewGetOwner ok");
}
