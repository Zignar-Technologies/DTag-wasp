// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

#![allow(dead_code)]
#![allow(unused_imports)]

use wasmlib::*;

use crate::*;

#[derive(Clone)]
pub struct ArrayOfImmutableAgentID {
	pub(crate) proxy: Proxy,
}

impl ArrayOfImmutableAgentID {
    pub fn length(&self) -> u32 {
        self.proxy.length()
    }

    pub fn get_agent_id(&self, index: u32) -> ScImmutableAgentID {
        ScImmutableAgentID::new(self.proxy.index(index))
    }
}

#[derive(Clone)]
pub struct MapAgentIDToImmutableBool {
	pub(crate) proxy: Proxy,
}

impl MapAgentIDToImmutableBool {
    pub fn get_bool(&self, key: &ScAgentID) -> ScImmutableBool {
        ScImmutableBool::new(self.proxy.key(&agent_id_to_bytes(key)))
    }
}

#[derive(Clone)]
pub struct MapAgentIDToImmutableUint64 {
	pub(crate) proxy: Proxy,
}

impl MapAgentIDToImmutableUint64 {
    pub fn get_uint64(&self, key: &ScAgentID) -> ScImmutableUint64 {
        ScImmutableUint64::new(self.proxy.key(&agent_id_to_bytes(key)))
    }
}

#[derive(Clone)]
pub struct MapAgentIDToImmutableInt64 {
	pub(crate) proxy: Proxy,
}

impl MapAgentIDToImmutableInt64 {
    pub fn get_int64(&self, key: &ScAgentID) -> ScImmutableInt64 {
        ScImmutableInt64::new(self.proxy.key(&agent_id_to_bytes(key)))
    }
}

#[derive(Clone)]
pub struct ImmutablepriceoracleState {
	pub(crate) proxy: Proxy,
}

impl ImmutablepriceoracleState {
    pub fn approved_list(&self) -> ArrayOfImmutableAgentID {
		ArrayOfImmutableAgentID { proxy: self.proxy.root(STATE_APPROVED_LIST) }
	}

    pub fn approved_map(&self) -> MapAgentIDToImmutableBool {
		MapAgentIDToImmutableBool { proxy: self.proxy.root(STATE_APPROVED_MAP) }
	}

    pub fn last_price(&self) -> ScImmutableInt64 {
		ScImmutableInt64::new(self.proxy.root(STATE_LAST_PRICE))
	}

    pub fn oracle_last_update(&self) -> MapAgentIDToImmutableUint64 {
		MapAgentIDToImmutableUint64 { proxy: self.proxy.root(STATE_ORACLE_LAST_UPDATE) }
	}

    pub fn oracle_price(&self) -> MapAgentIDToImmutableInt64 {
		MapAgentIDToImmutableInt64 { proxy: self.proxy.root(STATE_ORACLE_PRICE) }
	}

    pub fn owner(&self) -> ScImmutableAgentID {
		ScImmutableAgentID::new(self.proxy.root(STATE_OWNER))
	}
}

#[derive(Clone)]
pub struct ArrayOfMutableAgentID {
	pub(crate) proxy: Proxy,
}

impl ArrayOfMutableAgentID {
	pub fn append_agent_id(&self) -> ScMutableAgentID {
		ScMutableAgentID::new(self.proxy.append())
	}

	pub fn clear(&self) {
        self.proxy.clear_array();
    }

    pub fn length(&self) -> u32 {
        self.proxy.length()
    }

    pub fn get_agent_id(&self, index: u32) -> ScMutableAgentID {
        ScMutableAgentID::new(self.proxy.index(index))
    }
}

#[derive(Clone)]
pub struct MapAgentIDToMutableBool {
	pub(crate) proxy: Proxy,
}

impl MapAgentIDToMutableBool {
    pub fn clear(&self) {
        self.proxy.clear_map();
    }

    pub fn get_bool(&self, key: &ScAgentID) -> ScMutableBool {
        ScMutableBool::new(self.proxy.key(&agent_id_to_bytes(key)))
    }
}

#[derive(Clone)]
pub struct MapAgentIDToMutableUint64 {
	pub(crate) proxy: Proxy,
}

impl MapAgentIDToMutableUint64 {
    pub fn clear(&self) {
        self.proxy.clear_map();
    }

    pub fn get_uint64(&self, key: &ScAgentID) -> ScMutableUint64 {
        ScMutableUint64::new(self.proxy.key(&agent_id_to_bytes(key)))
    }
}

#[derive(Clone)]
pub struct MapAgentIDToMutableInt64 {
	pub(crate) proxy: Proxy,
}

impl MapAgentIDToMutableInt64 {
    pub fn clear(&self) {
        self.proxy.clear_map();
    }

    pub fn get_int64(&self, key: &ScAgentID) -> ScMutableInt64 {
        ScMutableInt64::new(self.proxy.key(&agent_id_to_bytes(key)))
    }
}

#[derive(Clone)]
pub struct MutablepriceoracleState {
	pub(crate) proxy: Proxy,
}

impl MutablepriceoracleState {
    pub fn as_immutable(&self) -> ImmutablepriceoracleState {
		ImmutablepriceoracleState { proxy: self.proxy.root("") }
	}

    pub fn approved_list(&self) -> ArrayOfMutableAgentID {
		ArrayOfMutableAgentID { proxy: self.proxy.root(STATE_APPROVED_LIST) }
	}

    pub fn approved_map(&self) -> MapAgentIDToMutableBool {
		MapAgentIDToMutableBool { proxy: self.proxy.root(STATE_APPROVED_MAP) }
	}

    pub fn last_price(&self) -> ScMutableInt64 {
		ScMutableInt64::new(self.proxy.root(STATE_LAST_PRICE))
	}

    pub fn oracle_last_update(&self) -> MapAgentIDToMutableUint64 {
		MapAgentIDToMutableUint64 { proxy: self.proxy.root(STATE_ORACLE_LAST_UPDATE) }
	}

    pub fn oracle_price(&self) -> MapAgentIDToMutableInt64 {
		MapAgentIDToMutableInt64 { proxy: self.proxy.root(STATE_ORACLE_PRICE) }
	}

    pub fn owner(&self) -> ScMutableAgentID {
		ScMutableAgentID::new(self.proxy.root(STATE_OWNER))
	}
}
