// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

import * as wasmclient from "wasmclient"

const priceoracleHandlers = new Map<string, (evt: PriceoracleEvents, msg: string[]) => void>([
	["priceoracle.price", (evt: PriceoracleEvents, msg: string[]) => evt.price(new EventPrice(msg))],
	["priceoracle.priceSet", (evt: PriceoracleEvents, msg: string[]) => evt.priceSet(new EventPriceSet(msg))],
]);

export class PriceoracleEvents implements wasmclient.IEventHandler {
/* eslint-disable @typescript-eslint/no-empty-function */
	price: (evt: EventPrice) => void = () => {};
	priceSet: (evt: EventPriceSet) => void = () => {};
/* eslint-enable @typescript-eslint/no-empty-function */

	public callHandler(topic: string, params: string[]): void {
		const handler = priceoracleHandlers.get(topic);
		if (handler) {
			handler(this, params);
		}
	}

	public onPriceoraclePrice(handler: (evt: EventPrice) => void): void {
		this.price = handler;
	}

	public onPriceoraclePriceSet(handler: (evt: EventPriceSet) => void): void {
		this.priceSet = handler;
	}
}

export class EventPrice extends wasmclient.Event {
	public readonly price: wasmclient.Int64;
	
	public constructor(msg: string[]) {
		super(msg);
		this.price = this.nextInt64();
	}
}

export class EventPriceSet extends wasmclient.Event {
	public readonly price: wasmclient.Int64;
	
	public constructor(msg: string[]) {
		super(msg);
		this.price = this.nextInt64();
	}
}
