// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

import * as wasmtypes from "wasmlib/wasmtypes";
import * as sc from "./index";

export class ArrayOfImmutableAgentID extends wasmtypes.ScProxy {

	length(): u32 {
		return this.proxy.length();
	}

	getAgentID(index: u32): wasmtypes.ScImmutableAgentID {
		return new wasmtypes.ScImmutableAgentID(this.proxy.index(index));
	}
}

export class MapAgentIDToImmutableBool extends wasmtypes.ScProxy {

	getBool(key: wasmtypes.ScAgentID): wasmtypes.ScImmutableBool {
		return new wasmtypes.ScImmutableBool(this.proxy.key(wasmtypes.agentIDToBytes(key)));
	}
}

export class MapAgentIDToImmutableUint64 extends wasmtypes.ScProxy {

	getUint64(key: wasmtypes.ScAgentID): wasmtypes.ScImmutableUint64 {
		return new wasmtypes.ScImmutableUint64(this.proxy.key(wasmtypes.agentIDToBytes(key)));
	}
}

export class MapAgentIDToImmutableInt64 extends wasmtypes.ScProxy {

	getInt64(key: wasmtypes.ScAgentID): wasmtypes.ScImmutableInt64 {
		return new wasmtypes.ScImmutableInt64(this.proxy.key(wasmtypes.agentIDToBytes(key)));
	}
}

export class ImmutablepriceoracleState extends wasmtypes.ScProxy {
	approvedList(): sc.ArrayOfImmutableAgentID {
		return new sc.ArrayOfImmutableAgentID(this.proxy.root(sc.StateApprovedList));
	}

	approvedMap(): sc.MapAgentIDToImmutableBool {
		return new sc.MapAgentIDToImmutableBool(this.proxy.root(sc.StateApprovedMap));
	}

	lastPrice(): wasmtypes.ScImmutableInt64 {
		return new wasmtypes.ScImmutableInt64(this.proxy.root(sc.StateLastPrice));
	}

	oracleLastUpdate(): sc.MapAgentIDToImmutableUint64 {
		return new sc.MapAgentIDToImmutableUint64(this.proxy.root(sc.StateOracleLastUpdate));
	}

	oraclePrice(): sc.MapAgentIDToImmutableInt64 {
		return new sc.MapAgentIDToImmutableInt64(this.proxy.root(sc.StateOraclePrice));
	}

	owner(): wasmtypes.ScImmutableAgentID {
		return new wasmtypes.ScImmutableAgentID(this.proxy.root(sc.StateOwner));
	}
}

export class ArrayOfMutableAgentID extends wasmtypes.ScProxy {

	appendAgentID(): wasmtypes.ScMutableAgentID {
		return new wasmtypes.ScMutableAgentID(this.proxy.append());
	}

	clear(): void {
		this.proxy.clearArray();
	}

	length(): u32 {
		return this.proxy.length();
	}

	getAgentID(index: u32): wasmtypes.ScMutableAgentID {
		return new wasmtypes.ScMutableAgentID(this.proxy.index(index));
	}
}

export class MapAgentIDToMutableBool extends wasmtypes.ScProxy {

	clear(): void {
		this.proxy.clearMap();
	}

	getBool(key: wasmtypes.ScAgentID): wasmtypes.ScMutableBool {
		return new wasmtypes.ScMutableBool(this.proxy.key(wasmtypes.agentIDToBytes(key)));
	}
}

export class MapAgentIDToMutableUint64 extends wasmtypes.ScProxy {

	clear(): void {
		this.proxy.clearMap();
	}

	getUint64(key: wasmtypes.ScAgentID): wasmtypes.ScMutableUint64 {
		return new wasmtypes.ScMutableUint64(this.proxy.key(wasmtypes.agentIDToBytes(key)));
	}
}

export class MapAgentIDToMutableInt64 extends wasmtypes.ScProxy {

	clear(): void {
		this.proxy.clearMap();
	}

	getInt64(key: wasmtypes.ScAgentID): wasmtypes.ScMutableInt64 {
		return new wasmtypes.ScMutableInt64(this.proxy.key(wasmtypes.agentIDToBytes(key)));
	}
}

export class MutablepriceoracleState extends wasmtypes.ScProxy {
	asImmutable(): sc.ImmutablepriceoracleState {
		return new sc.ImmutablepriceoracleState(this.proxy);
	}

	approvedList(): sc.ArrayOfMutableAgentID {
		return new sc.ArrayOfMutableAgentID(this.proxy.root(sc.StateApprovedList));
	}

	approvedMap(): sc.MapAgentIDToMutableBool {
		return new sc.MapAgentIDToMutableBool(this.proxy.root(sc.StateApprovedMap));
	}

	lastPrice(): wasmtypes.ScMutableInt64 {
		return new wasmtypes.ScMutableInt64(this.proxy.root(sc.StateLastPrice));
	}

	oracleLastUpdate(): sc.MapAgentIDToMutableUint64 {
		return new sc.MapAgentIDToMutableUint64(this.proxy.root(sc.StateOracleLastUpdate));
	}

	oraclePrice(): sc.MapAgentIDToMutableInt64 {
		return new sc.MapAgentIDToMutableInt64(this.proxy.root(sc.StateOraclePrice));
	}

	owner(): wasmtypes.ScMutableAgentID {
		return new wasmtypes.ScMutableAgentID(this.proxy.root(sc.StateOwner));
	}
}
