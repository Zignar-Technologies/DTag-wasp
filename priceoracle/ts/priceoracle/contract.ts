// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

import * as wasmlib from "wasmlib";
import * as sc from "./index";

export class ApproveOracleCall {
	func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncApproveOracle);
	params: sc.MutableApproveOracleParams = new sc.MutableApproveOracleParams(wasmlib.ScView.nilProxy);
}

export class ApproveOracleContext {
	events: sc.priceoracleEvents = new sc.priceoracleEvents();
	params: sc.ImmutableApproveOracleParams = new sc.ImmutableApproveOracleParams(wasmlib.paramsProxy());
	state: sc.MutablepriceoracleState = new sc.MutablepriceoracleState(wasmlib.ScState.proxy());
}

export class InitCall {
	func: wasmlib.ScInitFunc = new wasmlib.ScInitFunc(sc.HScName, sc.HFuncInit);
	params: sc.MutableInitParams = new sc.MutableInitParams(wasmlib.ScView.nilProxy);
}

export class InitContext {
	events: sc.priceoracleEvents = new sc.priceoracleEvents();
	params: sc.ImmutableInitParams = new sc.ImmutableInitParams(wasmlib.paramsProxy());
	state: sc.MutablepriceoracleState = new sc.MutablepriceoracleState(wasmlib.ScState.proxy());
}

export class SetMiotaPriceCall {
	func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncSetMiotaPrice);
	params: sc.MutableSetMiotaPriceParams = new sc.MutableSetMiotaPriceParams(wasmlib.ScView.nilProxy);
}

export class SetMiotaPriceContext {
	events: sc.priceoracleEvents = new sc.priceoracleEvents();
	params: sc.ImmutableSetMiotaPriceParams = new sc.ImmutableSetMiotaPriceParams(wasmlib.paramsProxy());
	state: sc.MutablepriceoracleState = new sc.MutablepriceoracleState(wasmlib.ScState.proxy());
}

export class SetOwnerCall {
	func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncSetOwner);
	params: sc.MutableSetOwnerParams = new sc.MutableSetOwnerParams(wasmlib.ScView.nilProxy);
}

export class SetOwnerContext {
	events: sc.priceoracleEvents = new sc.priceoracleEvents();
	params: sc.ImmutableSetOwnerParams = new sc.ImmutableSetOwnerParams(wasmlib.paramsProxy());
	state: sc.MutablepriceoracleState = new sc.MutablepriceoracleState(wasmlib.ScState.proxy());
}

export class GetMiotaPriceCall {
	func: wasmlib.ScView = new wasmlib.ScView(sc.HScName, sc.HViewGetMiotaPrice);
	results: sc.ImmutableGetMiotaPriceResults = new sc.ImmutableGetMiotaPriceResults(wasmlib.ScView.nilProxy);
}

export class GetMiotaPriceContext {
	results: sc.MutableGetMiotaPriceResults = new sc.MutableGetMiotaPriceResults(wasmlib.ScView.nilProxy);
	state: sc.ImmutablepriceoracleState = new sc.ImmutablepriceoracleState(wasmlib.ScState.proxy());
}

export class GetOwnerCall {
	func: wasmlib.ScView = new wasmlib.ScView(sc.HScName, sc.HViewGetOwner);
	results: sc.ImmutableGetOwnerResults = new sc.ImmutableGetOwnerResults(wasmlib.ScView.nilProxy);
}

export class GetOwnerContext {
	results: sc.MutableGetOwnerResults = new sc.MutableGetOwnerResults(wasmlib.ScView.nilProxy);
	state: sc.ImmutablepriceoracleState = new sc.ImmutablepriceoracleState(wasmlib.ScState.proxy());
}

export class ScFuncs {
	static approveOracle(_ctx: wasmlib.ScFuncCallContext): ApproveOracleCall {
		const f = new ApproveOracleCall();
		f.params = new sc.MutableApproveOracleParams(wasmlib.newCallParamsProxy(f.func));
		return f;
	}

	static init(_ctx: wasmlib.ScFuncCallContext): InitCall {
		const f = new InitCall();
		f.params = new sc.MutableInitParams(wasmlib.newCallParamsProxy(f.func));
		return f;
	}

	static setMiotaPrice(_ctx: wasmlib.ScFuncCallContext): SetMiotaPriceCall {
		const f = new SetMiotaPriceCall();
		f.params = new sc.MutableSetMiotaPriceParams(wasmlib.newCallParamsProxy(f.func));
		return f;
	}

	static setOwner(_ctx: wasmlib.ScFuncCallContext): SetOwnerCall {
		const f = new SetOwnerCall();
		f.params = new sc.MutableSetOwnerParams(wasmlib.newCallParamsProxy(f.func));
		return f;
	}

	static getMiotaPrice(_ctx: wasmlib.ScViewCallContext): GetMiotaPriceCall {
		const f = new GetMiotaPriceCall();
		f.results = new sc.ImmutableGetMiotaPriceResults(wasmlib.newCallResultsProxy(f.func));
		return f;
	}

	static getOwner(_ctx: wasmlib.ScViewCallContext): GetOwnerCall {
		const f = new GetOwnerCall();
		f.results = new sc.ImmutableGetOwnerResults(wasmlib.newCallResultsProxy(f.func));
		return f;
	}
}
