// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

package main

import "github.com/iotaledger/wasp/packages/wasmvm/wasmlib/go/wasmclient"

var priceoracleHandlers = map[string]func(*PriceoracleEvents, []string){
	"priceoracle.price":    func(evt *PriceoracleEvents, msg []string) { evt.onPriceoraclePriceThunk(msg) },
	"priceoracle.priceSet": func(evt *PriceoracleEvents, msg []string) { evt.onPriceoraclePriceSetThunk(msg) },
}

type PriceoracleEvents struct {
	price    func(e *EventPrice)
	priceSet func(e *EventPriceSet)
}

func (h *PriceoracleEvents) CallHandler(topic string, params []string) {
	handler := priceoracleHandlers[topic]
	if handler != nil {
		handler(h, params)
	}
}

func (h *PriceoracleEvents) OnPriceoraclePrice(handler func(e *EventPrice)) {
	h.price = handler
}

func (h *PriceoracleEvents) OnPriceoraclePriceSet(handler func(e *EventPriceSet)) {
	h.priceSet = handler
}

type EventPrice struct {
	wasmclient.Event
	Price int64
}

func (h *PriceoracleEvents) onPriceoraclePriceThunk(message []string) {
	if h.price == nil {
		return
	}
	e := &EventPrice{}
	e.Init(message)
	e.Price = e.NextInt64()
	h.price(e)
}

type EventPriceSet struct {
	wasmclient.Event
	Price int64
}

func (h *PriceoracleEvents) onPriceoraclePriceSetThunk(message []string) {
	if h.priceSet == nil {
		return
	}
	e := &EventPriceSet{}
	e.Init(message)
	e.Price = e.NextInt64()
	h.priceSet(e)
}
