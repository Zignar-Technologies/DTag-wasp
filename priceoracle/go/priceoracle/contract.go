// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

package priceoracle

import "github.com/iotaledger/wasp/packages/wasmvm/wasmlib/go/wasmlib"

type ApproveOracleCall struct {
	Func    *wasmlib.ScFunc
	Params  MutableApproveOracleParams
}

type InitCall struct {
	Func    *wasmlib.ScInitFunc
	Params  MutableInitParams
}

type SetMiotaPriceCall struct {
	Func    *wasmlib.ScFunc
	Params  MutableSetMiotaPriceParams
}

type SetOwnerCall struct {
	Func    *wasmlib.ScFunc
	Params  MutableSetOwnerParams
}

type GetMiotaPriceCall struct {
	Func    *wasmlib.ScView
	Results ImmutableGetMiotaPriceResults
}

type GetOwnerCall struct {
	Func    *wasmlib.ScView
	Results ImmutableGetOwnerResults
}

type Funcs struct{}

var ScFuncs Funcs

func (sc Funcs) ApproveOracle(ctx wasmlib.ScFuncCallContext) *ApproveOracleCall {
	f := &ApproveOracleCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncApproveOracle)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(&f.Func.ScView)
	return f
}

func (sc Funcs) Init(ctx wasmlib.ScFuncCallContext) *InitCall {
	f := &InitCall{Func: wasmlib.NewScInitFunc(ctx, HScName, HFuncInit)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(&f.Func.ScView)
	return f
}

func (sc Funcs) SetMiotaPrice(ctx wasmlib.ScFuncCallContext) *SetMiotaPriceCall {
	f := &SetMiotaPriceCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncSetMiotaPrice)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(&f.Func.ScView)
	return f
}

func (sc Funcs) SetOwner(ctx wasmlib.ScFuncCallContext) *SetOwnerCall {
	f := &SetOwnerCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncSetOwner)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(&f.Func.ScView)
	return f
}

func (sc Funcs) GetMiotaPrice(ctx wasmlib.ScViewCallContext) *GetMiotaPriceCall {
	f := &GetMiotaPriceCall{Func: wasmlib.NewScView(ctx, HScName, HViewGetMiotaPrice)}
	wasmlib.NewCallResultsProxy(f.Func, &f.Results.proxy)
	return f
}

func (sc Funcs) GetOwner(ctx wasmlib.ScViewCallContext) *GetOwnerCall {
	f := &GetOwnerCall{Func: wasmlib.NewScView(ctx, HScName, HViewGetOwner)}
	wasmlib.NewCallResultsProxy(f.Func, &f.Results.proxy)
	return f
}
