// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

//nolint:dupl
package priceoracle

import "github.com/iotaledger/wasp/packages/wasmvm/wasmlib/go/wasmlib"

var exportMap = wasmlib.ScExportMap{
	Names: []string{
    	FuncApproveOracle,
    	FuncInit,
    	FuncSetMiotaPrice,
    	FuncSetOwner,
    	ViewGetMiotaPrice,
    	ViewGetOwner,
	},
	Funcs: []wasmlib.ScFuncContextFunction{
    	funcApproveOracleThunk,
    	funcInitThunk,
    	funcSetMiotaPriceThunk,
    	funcSetOwnerThunk,
	},
	Views: []wasmlib.ScViewContextFunction{
    	viewGetMiotaPriceThunk,
    	viewGetOwnerThunk,
	},
}

func OnLoad(index int32) {
	if index >= 0 {
		wasmlib.ScExportsCall(index, &exportMap)
		return
	}

	wasmlib.ScExportsExport(&exportMap)
}

type ApproveOracleContext struct {
	Events  priceoracleEvents
	Params  ImmutableApproveOracleParams
	State   MutablepriceoracleState
}

func funcApproveOracleThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("priceoracle.funcApproveOracle")
	f := &ApproveOracleContext{
		Params: ImmutableApproveOracleParams{
			proxy: wasmlib.NewParamsProxy(),
		},
		State: MutablepriceoracleState{
			proxy: wasmlib.NewStateProxy(),
		},
	}

	// current owner of this smart contract
	access := f.State.Owner()
	ctx.Require(access.Exists(), "access not set: owner")
	ctx.Require(ctx.Caller() == access.Value(), "no permission")

	ctx.Require(f.Params.Agentid().Exists(), "missing mandatory agentid")
	funcApproveOracle(ctx, f)
	ctx.Log("priceoracle.funcApproveOracle ok")
}

type InitContext struct {
	Events  priceoracleEvents
	Params  ImmutableInitParams
	State   MutablepriceoracleState
}

func funcInitThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("priceoracle.funcInit")
	f := &InitContext{
		Params: ImmutableInitParams{
			proxy: wasmlib.NewParamsProxy(),
		},
		State: MutablepriceoracleState{
			proxy: wasmlib.NewStateProxy(),
		},
	}
	funcInit(ctx, f)
	ctx.Log("priceoracle.funcInit ok")
}

type SetMiotaPriceContext struct {
	Events  priceoracleEvents
	Params  ImmutableSetMiotaPriceParams
	State   MutablepriceoracleState
}

func funcSetMiotaPriceThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("priceoracle.funcSetMiotaPrice")
	f := &SetMiotaPriceContext{
		Params: ImmutableSetMiotaPriceParams{
			proxy: wasmlib.NewParamsProxy(),
		},
		State: MutablepriceoracleState{
			proxy: wasmlib.NewStateProxy(),
		},
	}
	ctx.Require(f.Params.Price().Exists(), "missing mandatory price")
	funcSetMiotaPrice(ctx, f)
	ctx.Log("priceoracle.funcSetMiotaPrice ok")
}

type SetOwnerContext struct {
	Events  priceoracleEvents
	Params  ImmutableSetOwnerParams
	State   MutablepriceoracleState
}

func funcSetOwnerThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("priceoracle.funcSetOwner")
	f := &SetOwnerContext{
		Params: ImmutableSetOwnerParams{
			proxy: wasmlib.NewParamsProxy(),
		},
		State: MutablepriceoracleState{
			proxy: wasmlib.NewStateProxy(),
		},
	}

	// current owner of this smart contract
	access := f.State.Owner()
	ctx.Require(access.Exists(), "access not set: owner")
	ctx.Require(ctx.Caller() == access.Value(), "no permission")

	ctx.Require(f.Params.Owner().Exists(), "missing mandatory owner")
	funcSetOwner(ctx, f)
	ctx.Log("priceoracle.funcSetOwner ok")
}

type GetMiotaPriceContext struct {
	Results MutableGetMiotaPriceResults
	State   ImmutablepriceoracleState
}

func viewGetMiotaPriceThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("priceoracle.viewGetMiotaPrice")
	results := wasmlib.NewScDict()
	f := &GetMiotaPriceContext{
		Results: MutableGetMiotaPriceResults{
			proxy: results.AsProxy(),
		},
		State: ImmutablepriceoracleState{
			proxy: wasmlib.NewStateProxy(),
		},
	}
	viewGetMiotaPrice(ctx, f)
	ctx.Results(results)
	ctx.Log("priceoracle.viewGetMiotaPrice ok")
}

type GetOwnerContext struct {
	Results MutableGetOwnerResults
	State   ImmutablepriceoracleState
}

func viewGetOwnerThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("priceoracle.viewGetOwner")
	results := wasmlib.NewScDict()
	f := &GetOwnerContext{
		Results: MutableGetOwnerResults{
			proxy: results.AsProxy(),
		},
		State: ImmutablepriceoracleState{
			proxy: wasmlib.NewStateProxy(),
		},
	}
	viewGetOwner(ctx, f)
	ctx.Results(results)
	ctx.Log("priceoracle.viewGetOwner ok")
}
