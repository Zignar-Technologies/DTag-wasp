// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

import * as wasmclient from "wasmclient"

const zentangleHandlers = new Map<string, (evt: ZentangleEvents, msg: string[]) => void>([
	["zentangle.gameEnded", (evt: ZentangleEvents, msg: string[]) => evt.gameEnded(new EventGameEnded(msg))],
	["zentangle.gameStarted", (evt: ZentangleEvents, msg: string[]) => evt.gameStarted(new EventGameStarted(msg))],
	["zentangle.imagetagged", (evt: ZentangleEvents, msg: string[]) => evt.imagetagged(new EventImagetagged(msg))],
	["zentangle.paid", (evt: ZentangleEvents, msg: string[]) => evt.paid(new EventPaid(msg))],
	["zentangle.playRequested", (evt: ZentangleEvents, msg: string[]) => evt.playRequested(new EventPlayRequested(msg))],
]);

export class ZentangleEvents implements wasmclient.IEventHandler {
/* eslint-disable @typescript-eslint/no-empty-function */
	gameEnded: (evt: EventGameEnded) => void = () => {};
	gameStarted: (evt: EventGameStarted) => void = () => {};
	imagetagged: (evt: EventImagetagged) => void = () => {};
	paid: (evt: EventPaid) => void = () => {};
	playRequested: (evt: EventPlayRequested) => void = () => {};
/* eslint-enable @typescript-eslint/no-empty-function */

	public callHandler(topic: string, params: string[]): void {
		const handler = zentangleHandlers.get(topic);
		if (handler) {
			handler(this, params);
		}
	}

	public onZentangleGameEnded(handler: (evt: EventGameEnded) => void): void {
		this.gameEnded = handler;
	}

	public onZentangleGameStarted(handler: (evt: EventGameStarted) => void): void {
		this.gameStarted = handler;
	}

	public onZentangleImagetagged(handler: (evt: EventImagetagged) => void): void {
		this.imagetagged = handler;
	}

	public onZentanglePaid(handler: (evt: EventPaid) => void): void {
		this.paid = handler;
	}

	public onZentanglePlayRequested(handler: (evt: EventPlayRequested) => void): void {
		this.playRequested = handler;
	}
}

export class EventGameEnded extends wasmclient.Event {
	
	public constructor(msg: string[]) {
		super(msg);
	}
}

export class EventGameStarted extends wasmclient.Event {
	public readonly description: wasmclient.String;
	public readonly numberOfImages: wasmclient.Uint32;
	public readonly reward: wasmclient.Uint64;
	public readonly tagsRequiredPerImage: wasmclient.Uint32;
	
	public constructor(msg: string[]) {
		super(msg);
		this.description = this.nextString();
		this.numberOfImages = this.nextUint32();
		this.reward = this.nextUint64();
		this.tagsRequiredPerImage = this.nextUint32();
	}
}

export class EventImagetagged extends wasmclient.Event {
	public readonly address: wasmclient.String;
	public readonly imageId: wasmclient.Uint32;
	public readonly playsPerImage: wasmclient.Uint32;
	
	public constructor(msg: string[]) {
		super(msg);
		this.address = this.nextString();
		this.imageId = this.nextUint32();
		this.playsPerImage = this.nextUint32();
	}
}

export class EventPaid extends wasmclient.Event {
	public readonly accuracy: wasmclient.String;
	public readonly amount: wasmclient.Uint64;
	public readonly bet: wasmclient.Uint64;
	public readonly boost: wasmclient.Uint8;
	public readonly player: wasmclient.String;
	public readonly position: wasmclient.Uint64;
	
	public constructor(msg: string[]) {
		super(msg);
		this.accuracy = this.nextString();
		this.amount = this.nextUint64();
		this.bet = this.nextUint64();
		this.boost = this.nextUint8();
		this.player = this.nextString();
		this.position = this.nextUint64();
	}
}

export class EventPlayRequested extends wasmclient.Event {
	public readonly address: wasmclient.String;
	public readonly amount: wasmclient.Uint64;
	public readonly imageId: wasmclient.Uint32;
	
	public constructor(msg: string[]) {
		super(msg);
		this.address = this.nextString();
		this.amount = this.nextUint64();
		this.imageId = this.nextUint32();
	}
}
