// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

import * as wasmlib from "wasmlib";
import * as sc from "./index";

const exportMap: wasmlib.ScExportMap = {
	names: [
		sc.FuncCreateGame,
		sc.FuncEndGame,
		sc.FuncInit,
		sc.FuncRequestPlay,
		sc.FuncSendTags,
		sc.FuncSetOwner,
		sc.FuncWithdraw,
		sc.ViewGetOwner,
		sc.ViewGetPlayerBets,
		sc.ViewGetPlayerInfo,
		sc.ViewGetPlaysPerImage,
		sc.ViewGetResults,
	],
	funcs: [
		funcCreateGameThunk,
		funcEndGameThunk,
		funcInitThunk,
		funcRequestPlayThunk,
		funcSendTagsThunk,
		funcSetOwnerThunk,
		funcWithdrawThunk,
	],
	views: [
		viewGetOwnerThunk,
		viewGetPlayerBetsThunk,
		viewGetPlayerInfoThunk,
		viewGetPlaysPerImageThunk,
		viewGetResultsThunk,
	],
};

export function on_call(index: i32): void {
	wasmlib.ScExports.call(index, exportMap);
}

export function on_load(): void {
	wasmlib.ScExports.export(exportMap);
}

function funcCreateGameThunk(ctx: wasmlib.ScFuncContext): void {
	ctx.log("zentangle.funcCreateGame");
	let f = new sc.CreateGameContext();
	ctx.require(f.params.description().exists(), "missing mandatory description");
	ctx.require(f.params.numberOfImages().exists(), "missing mandatory numberOfImages");
	sc.funcCreateGame(ctx, f);
	ctx.log("zentangle.funcCreateGame ok");
}

function funcEndGameThunk(ctx: wasmlib.ScFuncContext): void {
	ctx.log("zentangle.funcEndGame");
	let f = new sc.EndGameContext();
	sc.funcEndGame(ctx, f);
	ctx.log("zentangle.funcEndGame ok");
}

function funcInitThunk(ctx: wasmlib.ScFuncContext): void {
	ctx.log("zentangle.funcInit");
	let f = new sc.InitContext();
	sc.funcInit(ctx, f);
	ctx.log("zentangle.funcInit ok");
}

function funcRequestPlayThunk(ctx: wasmlib.ScFuncContext): void {
	ctx.log("zentangle.funcRequestPlay");
	let f = new sc.RequestPlayContext();
	const results = new wasmlib.ScDict([]);
	f.results = new sc.MutableRequestPlayResults(results.asProxy());
	sc.funcRequestPlay(ctx, f);
	ctx.results(results);
	ctx.log("zentangle.funcRequestPlay ok");
}

function funcSendTagsThunk(ctx: wasmlib.ScFuncContext): void {
	ctx.log("zentangle.funcSendTags");
	let f = new sc.SendTagsContext();
	const results = new wasmlib.ScDict([]);
	f.results = new sc.MutableSendTagsResults(results.asProxy());
	ctx.require(f.params.inputJson().exists(), "missing mandatory inputJson");
	sc.funcSendTags(ctx, f);
	ctx.results(results);
	ctx.log("zentangle.funcSendTags ok");
}

function funcSetOwnerThunk(ctx: wasmlib.ScFuncContext): void {
	ctx.log("zentangle.funcSetOwner");
	let f = new sc.SetOwnerContext();

	// current owner of this smart contract
	const access = f.state.owner();
	ctx.require(access.exists(), "access not set: owner");
	ctx.require(ctx.caller().equals(access.value()), "no permission");

	ctx.require(f.params.owner().exists(), "missing mandatory owner");
	sc.funcSetOwner(ctx, f);
	ctx.log("zentangle.funcSetOwner ok");
}

function funcWithdrawThunk(ctx: wasmlib.ScFuncContext): void {
	ctx.log("zentangle.funcWithdraw");
	let f = new sc.WithdrawContext();

	// current owner of this smart contract
	const access = f.state.owner();
	ctx.require(access.exists(), "access not set: owner");
	ctx.require(ctx.caller().equals(access.value()), "no permission");

	sc.funcWithdraw(ctx, f);
	ctx.log("zentangle.funcWithdraw ok");
}

function viewGetOwnerThunk(ctx: wasmlib.ScViewContext): void {
	ctx.log("zentangle.viewGetOwner");
	let f = new sc.GetOwnerContext();
	const results = new wasmlib.ScDict([]);
	f.results = new sc.MutableGetOwnerResults(results.asProxy());
	sc.viewGetOwner(ctx, f);
	ctx.results(results);
	ctx.log("zentangle.viewGetOwner ok");
}

function viewGetPlayerBetsThunk(ctx: wasmlib.ScViewContext): void {
	ctx.log("zentangle.viewGetPlayerBets");
	let f = new sc.GetPlayerBetsContext();
	const results = new wasmlib.ScDict([]);
	f.results = new sc.MutableGetPlayerBetsResults(results.asProxy());
	sc.viewGetPlayerBets(ctx, f);
	ctx.results(results);
	ctx.log("zentangle.viewGetPlayerBets ok");
}

function viewGetPlayerInfoThunk(ctx: wasmlib.ScViewContext): void {
	ctx.log("zentangle.viewGetPlayerInfo");
	let f = new sc.GetPlayerInfoContext();
	const results = new wasmlib.ScDict([]);
	f.results = new sc.MutableGetPlayerInfoResults(results.asProxy());
	ctx.require(f.params.playerAddress().exists(), "missing mandatory playerAddress");
	sc.viewGetPlayerInfo(ctx, f);
	ctx.results(results);
	ctx.log("zentangle.viewGetPlayerInfo ok");
}

function viewGetPlaysPerImageThunk(ctx: wasmlib.ScViewContext): void {
	ctx.log("zentangle.viewGetPlaysPerImage");
	let f = new sc.GetPlaysPerImageContext();
	const results = new wasmlib.ScDict([]);
	f.results = new sc.MutableGetPlaysPerImageResults(results.asProxy());
	ctx.require(f.params.imageId().exists(), "missing mandatory imageId");
	sc.viewGetPlaysPerImage(ctx, f);
	ctx.results(results);
	ctx.log("zentangle.viewGetPlaysPerImage ok");
}

function viewGetResultsThunk(ctx: wasmlib.ScViewContext): void {
	ctx.log("zentangle.viewGetResults");
	let f = new sc.GetResultsContext();
	const results = new wasmlib.ScDict([]);
	f.results = new sc.MutableGetResultsResults(results.asProxy());
	ctx.require(f.params.imageId().exists(), "missing mandatory imageId");
	sc.viewGetResults(ctx, f);
	ctx.results(results);
	ctx.log("zentangle.viewGetResults ok");
}
