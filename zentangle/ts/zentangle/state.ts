// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

import * as wasmlib from "wasmlib";
import * as sc from "./index";

export class ArrayOfImmutableBet {
	objID: i32;

    constructor(objID: i32) {
        this.objID = objID;
    }

    length(): i32 {
        return wasmlib.getLength(this.objID);
    }

	getBet(index: i32): sc.ImmutableBet {
		return new sc.ImmutableBet(this.objID, new wasmlib.Key32(index));
	}
}

export class MapStringToImmutableBet {
	objID: i32;

    constructor(objID: i32) {
        this.objID = objID;
    }

    getBet(key: string): sc.ImmutableBet {
        return new sc.ImmutableBet(this.objID, wasmlib.Key32.fromString(key));
    }
}

export class MapStringToImmutablePlayerBoost {
	objID: i32;

    constructor(objID: i32) {
        this.objID = objID;
    }

    getPlayerBoost(key: string): sc.ImmutablePlayerBoost {
        return new sc.ImmutablePlayerBoost(this.objID, wasmlib.Key32.fromString(key));
    }
}

export class ArrayOfImmutableString {
	objID: i32;

    constructor(objID: i32) {
        this.objID = objID;
    }

    length(): i32 {
        return wasmlib.getLength(this.objID);
    }

    getString(index: i32): wasmlib.ScImmutableString {
        return new wasmlib.ScImmutableString(this.objID, new wasmlib.Key32(index));
    }
}

export class ArrayOfImmutableUint32 {
	objID: i32;

    constructor(objID: i32) {
        this.objID = objID;
    }

    length(): i32 {
        return wasmlib.getLength(this.objID);
    }

    getUint32(index: i32): wasmlib.ScImmutableUint32 {
        return new wasmlib.ScImmutableUint32(this.objID, new wasmlib.Key32(index));
    }
}

export class ArrayOfImmutableTaggedImage {
	objID: i32;

    constructor(objID: i32) {
        this.objID = objID;
    }

    length(): i32 {
        return wasmlib.getLength(this.objID);
    }

	getTaggedImage(index: i32): sc.ImmutableTaggedImage {
		return new sc.ImmutableTaggedImage(this.objID, new wasmlib.Key32(index));
	}
}

export class MapStringToImmutableUint64 {
	objID: i32;

    constructor(objID: i32) {
        this.objID = objID;
    }

    getUint64(key: string): wasmlib.ScImmutableUint64 {
        return new wasmlib.ScImmutableUint64(this.objID, wasmlib.Key32.fromString(key));
    }
}

export class ArrayOfImmutableValidTag {
	objID: i32;

    constructor(objID: i32) {
        this.objID = objID;
    }

    length(): i32 {
        return wasmlib.getLength(this.objID);
    }

	getValidTag(index: i32): sc.ImmutableValidTag {
		return new sc.ImmutableValidTag(this.objID, new wasmlib.Key32(index));
	}
}

export class ImmutablezentangleState extends wasmlib.ScMapID {
    bets(): sc.ArrayOfImmutableBet {
		let arrID = wasmlib.getObjectID(this.mapID, sc.idxMap[sc.IdxStateBets], wasmlib.TYPE_ARRAY|wasmlib.TYPE_BYTES);
		return new sc.ArrayOfImmutableBet(arrID);
	}

    completeImages(): wasmlib.ScImmutableUint32 {
		return new wasmlib.ScImmutableUint32(this.mapID, sc.idxMap[sc.IdxStateCompleteImages]);
	}

    creator(): wasmlib.ScImmutableAgentID {
		return new wasmlib.ScImmutableAgentID(this.mapID, sc.idxMap[sc.IdxStateCreator]);
	}

    description(): wasmlib.ScImmutableString {
		return new wasmlib.ScImmutableString(this.mapID, sc.idxMap[sc.IdxStateDescription]);
	}

    numberOfImages(): wasmlib.ScImmutableUint32 {
		return new wasmlib.ScImmutableUint32(this.mapID, sc.idxMap[sc.IdxStateNumberOfImages]);
	}

    owner(): wasmlib.ScImmutableAgentID {
		return new wasmlib.ScImmutableAgentID(this.mapID, sc.idxMap[sc.IdxStateOwner]);
	}

    pendingPlay(): sc.MapStringToImmutableBet {
		let mapID = wasmlib.getObjectID(this.mapID, sc.idxMap[sc.IdxStatePendingPlay], wasmlib.TYPE_MAP);
		return new sc.MapStringToImmutableBet(mapID);
	}

    pendingPlays(): sc.ArrayOfImmutableBet {
		let arrID = wasmlib.getObjectID(this.mapID, sc.idxMap[sc.IdxStatePendingPlays], wasmlib.TYPE_ARRAY|wasmlib.TYPE_BYTES);
		return new sc.ArrayOfImmutableBet(arrID);
	}

    playerBoost(): sc.MapStringToImmutablePlayerBoost {
		let mapID = wasmlib.getObjectID(this.mapID, sc.idxMap[sc.IdxStatePlayerBoost], wasmlib.TYPE_MAP);
		return new sc.MapStringToImmutablePlayerBoost(mapID);
	}

    playersBoost(): sc.ArrayOfImmutableString {
		let arrID = wasmlib.getObjectID(this.mapID, sc.idxMap[sc.IdxStatePlayersBoost], wasmlib.TYPE_ARRAY|wasmlib.TYPE_STRING);
		return new sc.ArrayOfImmutableString(arrID);
	}

    playsPerImage(): sc.ArrayOfImmutableUint32 {
		let arrID = wasmlib.getObjectID(this.mapID, sc.idxMap[sc.IdxStatePlaysPerImage], wasmlib.TYPE_ARRAY|wasmlib.TYPE_INT32);
		return new sc.ArrayOfImmutableUint32(arrID);
	}

    playsRequiredPerImage(): wasmlib.ScImmutableUint32 {
		return new wasmlib.ScImmutableUint32(this.mapID, sc.idxMap[sc.IdxStatePlaysRequiredPerImage]);
	}

    processedImages(): sc.ArrayOfImmutableTaggedImage {
		let arrID = wasmlib.getObjectID(this.mapID, sc.idxMap[sc.IdxStateProcessedImages], wasmlib.TYPE_ARRAY|wasmlib.TYPE_BYTES);
		return new sc.ArrayOfImmutableTaggedImage(arrID);
	}

    reward(): wasmlib.ScImmutableUint64 {
		return new wasmlib.ScImmutableUint64(this.mapID, sc.idxMap[sc.IdxStateReward]);
	}

    taggedImages(): sc.ArrayOfImmutableTaggedImage {
		let arrID = wasmlib.getObjectID(this.mapID, sc.idxMap[sc.IdxStateTaggedImages], wasmlib.TYPE_ARRAY|wasmlib.TYPE_BYTES);
		return new sc.ArrayOfImmutableTaggedImage(arrID);
	}

    totalPlayerTags(): sc.MapStringToImmutableUint64 {
		let mapID = wasmlib.getObjectID(this.mapID, sc.idxMap[sc.IdxStateTotalPlayerTags], wasmlib.TYPE_MAP);
		return new sc.MapStringToImmutableUint64(mapID);
	}

    validTags(): sc.ArrayOfImmutableValidTag {
		let arrID = wasmlib.getObjectID(this.mapID, sc.idxMap[sc.IdxStateValidTags], wasmlib.TYPE_ARRAY|wasmlib.TYPE_BYTES);
		return new sc.ArrayOfImmutableValidTag(arrID);
	}
}

export class ArrayOfMutableBet {
	objID: i32;

    constructor(objID: i32) {
        this.objID = objID;
    }

    clear(): void {
        wasmlib.clear(this.objID);
    }

    length(): i32 {
        return wasmlib.getLength(this.objID);
    }

	getBet(index: i32): sc.MutableBet {
		return new sc.MutableBet(this.objID, new wasmlib.Key32(index));
	}
}

export class MapStringToMutableBet {
	objID: i32;

    constructor(objID: i32) {
        this.objID = objID;
    }

    clear(): void {
        wasmlib.clear(this.objID);
    }

    getBet(key: string): sc.MutableBet {
        return new sc.MutableBet(this.objID, wasmlib.Key32.fromString(key));
    }
}

export class MapStringToMutablePlayerBoost {
	objID: i32;

    constructor(objID: i32) {
        this.objID = objID;
    }

    clear(): void {
        wasmlib.clear(this.objID);
    }

    getPlayerBoost(key: string): sc.MutablePlayerBoost {
        return new sc.MutablePlayerBoost(this.objID, wasmlib.Key32.fromString(key));
    }
}

export class ArrayOfMutableString {
	objID: i32;

    constructor(objID: i32) {
        this.objID = objID;
    }

    clear(): void {
        wasmlib.clear(this.objID);
    }

    length(): i32 {
        return wasmlib.getLength(this.objID);
    }

    getString(index: i32): wasmlib.ScMutableString {
        return new wasmlib.ScMutableString(this.objID, new wasmlib.Key32(index));
    }
}

export class ArrayOfMutableUint32 {
	objID: i32;

    constructor(objID: i32) {
        this.objID = objID;
    }

    clear(): void {
        wasmlib.clear(this.objID);
    }

    length(): i32 {
        return wasmlib.getLength(this.objID);
    }

    getUint32(index: i32): wasmlib.ScMutableUint32 {
        return new wasmlib.ScMutableUint32(this.objID, new wasmlib.Key32(index));
    }
}

export class ArrayOfMutableTaggedImage {
	objID: i32;

    constructor(objID: i32) {
        this.objID = objID;
    }

    clear(): void {
        wasmlib.clear(this.objID);
    }

    length(): i32 {
        return wasmlib.getLength(this.objID);
    }

	getTaggedImage(index: i32): sc.MutableTaggedImage {
		return new sc.MutableTaggedImage(this.objID, new wasmlib.Key32(index));
	}
}

export class MapStringToMutableUint64 {
	objID: i32;

    constructor(objID: i32) {
        this.objID = objID;
    }

    clear(): void {
        wasmlib.clear(this.objID);
    }

    getUint64(key: string): wasmlib.ScMutableUint64 {
        return new wasmlib.ScMutableUint64(this.objID, wasmlib.Key32.fromString(key));
    }
}

export class ArrayOfMutableValidTag {
	objID: i32;

    constructor(objID: i32) {
        this.objID = objID;
    }

    clear(): void {
        wasmlib.clear(this.objID);
    }

    length(): i32 {
        return wasmlib.getLength(this.objID);
    }

	getValidTag(index: i32): sc.MutableValidTag {
		return new sc.MutableValidTag(this.objID, new wasmlib.Key32(index));
	}
}

export class MutablezentangleState extends wasmlib.ScMapID {
    asImmutable(): sc.ImmutablezentangleState {
		const imm = new sc.ImmutablezentangleState();
		imm.mapID = this.mapID;
		return imm;
	}

    bets(): sc.ArrayOfMutableBet {
		let arrID = wasmlib.getObjectID(this.mapID, sc.idxMap[sc.IdxStateBets], wasmlib.TYPE_ARRAY|wasmlib.TYPE_BYTES);
		return new sc.ArrayOfMutableBet(arrID);
	}

    completeImages(): wasmlib.ScMutableUint32 {
		return new wasmlib.ScMutableUint32(this.mapID, sc.idxMap[sc.IdxStateCompleteImages]);
	}

    creator(): wasmlib.ScMutableAgentID {
		return new wasmlib.ScMutableAgentID(this.mapID, sc.idxMap[sc.IdxStateCreator]);
	}

    description(): wasmlib.ScMutableString {
		return new wasmlib.ScMutableString(this.mapID, sc.idxMap[sc.IdxStateDescription]);
	}

    numberOfImages(): wasmlib.ScMutableUint32 {
		return new wasmlib.ScMutableUint32(this.mapID, sc.idxMap[sc.IdxStateNumberOfImages]);
	}

    owner(): wasmlib.ScMutableAgentID {
		return new wasmlib.ScMutableAgentID(this.mapID, sc.idxMap[sc.IdxStateOwner]);
	}

    pendingPlay(): sc.MapStringToMutableBet {
		let mapID = wasmlib.getObjectID(this.mapID, sc.idxMap[sc.IdxStatePendingPlay], wasmlib.TYPE_MAP);
		return new sc.MapStringToMutableBet(mapID);
	}

    pendingPlays(): sc.ArrayOfMutableBet {
		let arrID = wasmlib.getObjectID(this.mapID, sc.idxMap[sc.IdxStatePendingPlays], wasmlib.TYPE_ARRAY|wasmlib.TYPE_BYTES);
		return new sc.ArrayOfMutableBet(arrID);
	}

    playerBoost(): sc.MapStringToMutablePlayerBoost {
		let mapID = wasmlib.getObjectID(this.mapID, sc.idxMap[sc.IdxStatePlayerBoost], wasmlib.TYPE_MAP);
		return new sc.MapStringToMutablePlayerBoost(mapID);
	}

    playersBoost(): sc.ArrayOfMutableString {
		let arrID = wasmlib.getObjectID(this.mapID, sc.idxMap[sc.IdxStatePlayersBoost], wasmlib.TYPE_ARRAY|wasmlib.TYPE_STRING);
		return new sc.ArrayOfMutableString(arrID);
	}

    playsPerImage(): sc.ArrayOfMutableUint32 {
		let arrID = wasmlib.getObjectID(this.mapID, sc.idxMap[sc.IdxStatePlaysPerImage], wasmlib.TYPE_ARRAY|wasmlib.TYPE_INT32);
		return new sc.ArrayOfMutableUint32(arrID);
	}

    playsRequiredPerImage(): wasmlib.ScMutableUint32 {
		return new wasmlib.ScMutableUint32(this.mapID, sc.idxMap[sc.IdxStatePlaysRequiredPerImage]);
	}

    processedImages(): sc.ArrayOfMutableTaggedImage {
		let arrID = wasmlib.getObjectID(this.mapID, sc.idxMap[sc.IdxStateProcessedImages], wasmlib.TYPE_ARRAY|wasmlib.TYPE_BYTES);
		return new sc.ArrayOfMutableTaggedImage(arrID);
	}

    reward(): wasmlib.ScMutableUint64 {
		return new wasmlib.ScMutableUint64(this.mapID, sc.idxMap[sc.IdxStateReward]);
	}

    taggedImages(): sc.ArrayOfMutableTaggedImage {
		let arrID = wasmlib.getObjectID(this.mapID, sc.idxMap[sc.IdxStateTaggedImages], wasmlib.TYPE_ARRAY|wasmlib.TYPE_BYTES);
		return new sc.ArrayOfMutableTaggedImage(arrID);
	}

    totalPlayerTags(): sc.MapStringToMutableUint64 {
		let mapID = wasmlib.getObjectID(this.mapID, sc.idxMap[sc.IdxStateTotalPlayerTags], wasmlib.TYPE_MAP);
		return new sc.MapStringToMutableUint64(mapID);
	}

    validTags(): sc.ArrayOfMutableValidTag {
		let arrID = wasmlib.getObjectID(this.mapID, sc.idxMap[sc.IdxStateValidTags], wasmlib.TYPE_ARRAY|wasmlib.TYPE_BYTES);
		return new sc.ArrayOfMutableValidTag(arrID);
	}
}
