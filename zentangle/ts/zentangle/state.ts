// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

import * as wasmtypes from "wasmlib/wasmtypes";
import * as sc from "./index";

export class ArrayOfImmutableBet extends wasmtypes.ScProxy {

	length(): u32 {
		return this.proxy.length();
	}

	getBet(index: u32): sc.ImmutableBet {
		return new sc.ImmutableBet(this.proxy.index(index));
	}
}

export class MapStringToImmutableBet extends wasmtypes.ScProxy {

	getBet(key: string): sc.ImmutableBet {
		return new sc.ImmutableBet(this.proxy.key(wasmtypes.stringToBytes(key)));
	}
}

export class MapStringToImmutablePlayerBoost extends wasmtypes.ScProxy {

	getPlayerBoost(key: string): sc.ImmutablePlayerBoost {
		return new sc.ImmutablePlayerBoost(this.proxy.key(wasmtypes.stringToBytes(key)));
	}
}

export class ArrayOfImmutableString extends wasmtypes.ScProxy {

	length(): u32 {
		return this.proxy.length();
	}

	getString(index: u32): wasmtypes.ScImmutableString {
		return new wasmtypes.ScImmutableString(this.proxy.index(index));
	}
}

export class ArrayOfImmutableUint32 extends wasmtypes.ScProxy {

	length(): u32 {
		return this.proxy.length();
	}

	getUint32(index: u32): wasmtypes.ScImmutableUint32 {
		return new wasmtypes.ScImmutableUint32(this.proxy.index(index));
	}
}

export class ArrayOfImmutableTaggedImage extends wasmtypes.ScProxy {

	length(): u32 {
		return this.proxy.length();
	}

	getTaggedImage(index: u32): sc.ImmutableTaggedImage {
		return new sc.ImmutableTaggedImage(this.proxy.index(index));
	}
}

export class MapStringToImmutableUint64 extends wasmtypes.ScProxy {

	getUint64(key: string): wasmtypes.ScImmutableUint64 {
		return new wasmtypes.ScImmutableUint64(this.proxy.key(wasmtypes.stringToBytes(key)));
	}
}

export class ArrayOfImmutableValidTag extends wasmtypes.ScProxy {

	length(): u32 {
		return this.proxy.length();
	}

	getValidTag(index: u32): sc.ImmutableValidTag {
		return new sc.ImmutableValidTag(this.proxy.index(index));
	}
}

export class ImmutablezentangleState extends wasmtypes.ScProxy {
	bets(): sc.ArrayOfImmutableBet {
		return new sc.ArrayOfImmutableBet(this.proxy.root(sc.StateBets));
	}

	completeImages(): wasmtypes.ScImmutableUint32 {
		return new wasmtypes.ScImmutableUint32(this.proxy.root(sc.StateCompleteImages));
	}

	creator(): wasmtypes.ScImmutableAgentID {
		return new wasmtypes.ScImmutableAgentID(this.proxy.root(sc.StateCreator));
	}

	description(): wasmtypes.ScImmutableString {
		return new wasmtypes.ScImmutableString(this.proxy.root(sc.StateDescription));
	}

	numberOfImages(): wasmtypes.ScImmutableUint32 {
		return new wasmtypes.ScImmutableUint32(this.proxy.root(sc.StateNumberOfImages));
	}

	owner(): wasmtypes.ScImmutableAgentID {
		return new wasmtypes.ScImmutableAgentID(this.proxy.root(sc.StateOwner));
	}

	pendingPlay(): sc.MapStringToImmutableBet {
		return new sc.MapStringToImmutableBet(this.proxy.root(sc.StatePendingPlay));
	}

	pendingPlays(): sc.ArrayOfImmutableBet {
		return new sc.ArrayOfImmutableBet(this.proxy.root(sc.StatePendingPlays));
	}

	playerBoost(): sc.MapStringToImmutablePlayerBoost {
		return new sc.MapStringToImmutablePlayerBoost(this.proxy.root(sc.StatePlayerBoost));
	}

	playersBoost(): sc.ArrayOfImmutableString {
		return new sc.ArrayOfImmutableString(this.proxy.root(sc.StatePlayersBoost));
	}

	playsPerImage(): sc.ArrayOfImmutableUint32 {
		return new sc.ArrayOfImmutableUint32(this.proxy.root(sc.StatePlaysPerImage));
	}

	playsRequiredPerImage(): wasmtypes.ScImmutableUint32 {
		return new wasmtypes.ScImmutableUint32(this.proxy.root(sc.StatePlaysRequiredPerImage));
	}

	processedImages(): sc.ArrayOfImmutableTaggedImage {
		return new sc.ArrayOfImmutableTaggedImage(this.proxy.root(sc.StateProcessedImages));
	}

	reward(): wasmtypes.ScImmutableUint64 {
		return new wasmtypes.ScImmutableUint64(this.proxy.root(sc.StateReward));
	}

	taggedImages(): sc.ArrayOfImmutableTaggedImage {
		return new sc.ArrayOfImmutableTaggedImage(this.proxy.root(sc.StateTaggedImages));
	}

	totalPlayerTags(): sc.MapStringToImmutableUint64 {
		return new sc.MapStringToImmutableUint64(this.proxy.root(sc.StateTotalPlayerTags));
	}

	validTags(): sc.ArrayOfImmutableValidTag {
		return new sc.ArrayOfImmutableValidTag(this.proxy.root(sc.StateValidTags));
	}
}

export class ArrayOfMutableBet extends wasmtypes.ScProxy {

	appendBet(): sc.MutableBet {
		return new sc.MutableBet(this.proxy.append());
	}

	clear(): void {
		this.proxy.clearArray();
	}

	length(): u32 {
		return this.proxy.length();
	}

	getBet(index: u32): sc.MutableBet {
		return new sc.MutableBet(this.proxy.index(index));
	}
}

export class MapStringToMutableBet extends wasmtypes.ScProxy {

	clear(): void {
		this.proxy.clearMap();
	}

	getBet(key: string): sc.MutableBet {
		return new sc.MutableBet(this.proxy.key(wasmtypes.stringToBytes(key)));
	}
}

export class MapStringToMutablePlayerBoost extends wasmtypes.ScProxy {

	clear(): void {
		this.proxy.clearMap();
	}

	getPlayerBoost(key: string): sc.MutablePlayerBoost {
		return new sc.MutablePlayerBoost(this.proxy.key(wasmtypes.stringToBytes(key)));
	}
}

export class ArrayOfMutableString extends wasmtypes.ScProxy {

	appendString(): wasmtypes.ScMutableString {
		return new wasmtypes.ScMutableString(this.proxy.append());
	}

	clear(): void {
		this.proxy.clearArray();
	}

	length(): u32 {
		return this.proxy.length();
	}

	getString(index: u32): wasmtypes.ScMutableString {
		return new wasmtypes.ScMutableString(this.proxy.index(index));
	}
}

export class ArrayOfMutableUint32 extends wasmtypes.ScProxy {

	appendUint32(): wasmtypes.ScMutableUint32 {
		return new wasmtypes.ScMutableUint32(this.proxy.append());
	}

	clear(): void {
		this.proxy.clearArray();
	}

	length(): u32 {
		return this.proxy.length();
	}

	getUint32(index: u32): wasmtypes.ScMutableUint32 {
		return new wasmtypes.ScMutableUint32(this.proxy.index(index));
	}
}

export class ArrayOfMutableTaggedImage extends wasmtypes.ScProxy {

	appendTaggedImage(): sc.MutableTaggedImage {
		return new sc.MutableTaggedImage(this.proxy.append());
	}

	clear(): void {
		this.proxy.clearArray();
	}

	length(): u32 {
		return this.proxy.length();
	}

	getTaggedImage(index: u32): sc.MutableTaggedImage {
		return new sc.MutableTaggedImage(this.proxy.index(index));
	}
}

export class MapStringToMutableUint64 extends wasmtypes.ScProxy {

	clear(): void {
		this.proxy.clearMap();
	}

	getUint64(key: string): wasmtypes.ScMutableUint64 {
		return new wasmtypes.ScMutableUint64(this.proxy.key(wasmtypes.stringToBytes(key)));
	}
}

export class ArrayOfMutableValidTag extends wasmtypes.ScProxy {

	appendValidTag(): sc.MutableValidTag {
		return new sc.MutableValidTag(this.proxy.append());
	}

	clear(): void {
		this.proxy.clearArray();
	}

	length(): u32 {
		return this.proxy.length();
	}

	getValidTag(index: u32): sc.MutableValidTag {
		return new sc.MutableValidTag(this.proxy.index(index));
	}
}

export class MutablezentangleState extends wasmtypes.ScProxy {
	asImmutable(): sc.ImmutablezentangleState {
		return new sc.ImmutablezentangleState(this.proxy);
	}

	bets(): sc.ArrayOfMutableBet {
		return new sc.ArrayOfMutableBet(this.proxy.root(sc.StateBets));
	}

	completeImages(): wasmtypes.ScMutableUint32 {
		return new wasmtypes.ScMutableUint32(this.proxy.root(sc.StateCompleteImages));
	}

	creator(): wasmtypes.ScMutableAgentID {
		return new wasmtypes.ScMutableAgentID(this.proxy.root(sc.StateCreator));
	}

	description(): wasmtypes.ScMutableString {
		return new wasmtypes.ScMutableString(this.proxy.root(sc.StateDescription));
	}

	numberOfImages(): wasmtypes.ScMutableUint32 {
		return new wasmtypes.ScMutableUint32(this.proxy.root(sc.StateNumberOfImages));
	}

	owner(): wasmtypes.ScMutableAgentID {
		return new wasmtypes.ScMutableAgentID(this.proxy.root(sc.StateOwner));
	}

	pendingPlay(): sc.MapStringToMutableBet {
		return new sc.MapStringToMutableBet(this.proxy.root(sc.StatePendingPlay));
	}

	pendingPlays(): sc.ArrayOfMutableBet {
		return new sc.ArrayOfMutableBet(this.proxy.root(sc.StatePendingPlays));
	}

	playerBoost(): sc.MapStringToMutablePlayerBoost {
		return new sc.MapStringToMutablePlayerBoost(this.proxy.root(sc.StatePlayerBoost));
	}

	playersBoost(): sc.ArrayOfMutableString {
		return new sc.ArrayOfMutableString(this.proxy.root(sc.StatePlayersBoost));
	}

	playsPerImage(): sc.ArrayOfMutableUint32 {
		return new sc.ArrayOfMutableUint32(this.proxy.root(sc.StatePlaysPerImage));
	}

	playsRequiredPerImage(): wasmtypes.ScMutableUint32 {
		return new wasmtypes.ScMutableUint32(this.proxy.root(sc.StatePlaysRequiredPerImage));
	}

	processedImages(): sc.ArrayOfMutableTaggedImage {
		return new sc.ArrayOfMutableTaggedImage(this.proxy.root(sc.StateProcessedImages));
	}

	reward(): wasmtypes.ScMutableUint64 {
		return new wasmtypes.ScMutableUint64(this.proxy.root(sc.StateReward));
	}

	taggedImages(): sc.ArrayOfMutableTaggedImage {
		return new sc.ArrayOfMutableTaggedImage(this.proxy.root(sc.StateTaggedImages));
	}

	totalPlayerTags(): sc.MapStringToMutableUint64 {
		return new sc.MapStringToMutableUint64(this.proxy.root(sc.StateTotalPlayerTags));
	}

	validTags(): sc.ArrayOfMutableValidTag {
		return new sc.ArrayOfMutableValidTag(this.proxy.root(sc.StateValidTags));
	}
}
