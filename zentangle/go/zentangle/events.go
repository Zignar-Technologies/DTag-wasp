// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

//nolint:gocritic
package zentangle

import "github.com/iotaledger/wasp/packages/wasmvm/wasmlib/go/wasmlib"
import "github.com/iotaledger/wasp/packages/wasmvm/wasmlib/go/wasmlib/wasmtypes"

type zentangleEvents struct {
}

func (e zentangleEvents) GameEnded() {
	evt := wasmlib.NewEventEncoder("zentangle.gameEnded")
	evt.Emit()
}

func (e zentangleEvents) GameStarted(description string, numberOfImages uint32, reward uint64, tagsRequiredPerImage uint32) {
	evt := wasmlib.NewEventEncoder("zentangle.gameStarted")
	evt.Encode(wasmtypes.StringToString(description))
	evt.Encode(wasmtypes.Uint32ToString(numberOfImages))
	evt.Encode(wasmtypes.Uint64ToString(reward))
	evt.Encode(wasmtypes.Uint32ToString(tagsRequiredPerImage))
	evt.Emit()
}

func (e zentangleEvents) Imagetagged(address string, imageId uint32, playsPerImage uint32) {
	evt := wasmlib.NewEventEncoder("zentangle.imagetagged")
	evt.Encode(wasmtypes.StringToString(address))
	evt.Encode(wasmtypes.Uint32ToString(imageId))
	evt.Encode(wasmtypes.Uint32ToString(playsPerImage))
	evt.Emit()
}

func (e zentangleEvents) Paid(accuracy string, amount uint64, bet uint64, boost uint8, player string, position uint64) {
	evt := wasmlib.NewEventEncoder("zentangle.paid")
	evt.Encode(wasmtypes.StringToString(accuracy))
	evt.Encode(wasmtypes.Uint64ToString(amount))
	evt.Encode(wasmtypes.Uint64ToString(bet))
	evt.Encode(wasmtypes.Uint8ToString(boost))
	evt.Encode(wasmtypes.StringToString(player))
	evt.Encode(wasmtypes.Uint64ToString(position))
	evt.Emit()
}

func (e zentangleEvents) PlayRequested(address string, amount uint64, imageId uint32) {
	evt := wasmlib.NewEventEncoder("zentangle.playRequested")
	evt.Encode(wasmtypes.StringToString(address))
	evt.Encode(wasmtypes.Uint64ToString(amount))
	evt.Encode(wasmtypes.Uint32ToString(imageId))
	evt.Emit()
}
