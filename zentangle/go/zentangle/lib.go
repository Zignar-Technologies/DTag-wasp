// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

//nolint:dupl
package zentangle

import "github.com/iotaledger/wasp/packages/wasmvm/wasmlib/go/wasmlib"

var exportMap = wasmlib.ScExportMap{
	Names: []string{
    	FuncCreateGame,
    	FuncEndGame,
    	FuncInit,
    	FuncRequestPlay,
    	FuncSendTags,
    	FuncSetOwner,
    	FuncWithdraw,
    	ViewGetOwner,
    	ViewGetPlayerBets,
    	ViewGetPlayerInfo,
    	ViewGetPlaysPerImage,
    	ViewGetResults,
	},
	Funcs: []wasmlib.ScFuncContextFunction{
    	funcCreateGameThunk,
    	funcEndGameThunk,
    	funcInitThunk,
    	funcRequestPlayThunk,
    	funcSendTagsThunk,
    	funcSetOwnerThunk,
    	funcWithdrawThunk,
	},
	Views: []wasmlib.ScViewContextFunction{
    	viewGetOwnerThunk,
    	viewGetPlayerBetsThunk,
    	viewGetPlayerInfoThunk,
    	viewGetPlaysPerImageThunk,
    	viewGetResultsThunk,
	},
}

func OnLoad(index int32) {
	if index >= 0 {
		wasmlib.ScExportsCall(index, &exportMap)
		return
	}

	wasmlib.ScExportsExport(&exportMap)
}

type CreateGameContext struct {
	Events  zentangleEvents
	Params  ImmutableCreateGameParams
	State   MutablezentangleState
}

func funcCreateGameThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("zentangle.funcCreateGame")
	f := &CreateGameContext{
		Params: ImmutableCreateGameParams{
			proxy: wasmlib.NewParamsProxy(),
		},
		State: MutablezentangleState{
			proxy: wasmlib.NewStateProxy(),
		},
	}
	ctx.Require(f.Params.Description().Exists(), "missing mandatory description")
	ctx.Require(f.Params.NumberOfImages().Exists(), "missing mandatory numberOfImages")
	funcCreateGame(ctx, f)
	ctx.Log("zentangle.funcCreateGame ok")
}

type EndGameContext struct {
	Events  zentangleEvents
	Params  ImmutableEndGameParams
	State   MutablezentangleState
}

func funcEndGameThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("zentangle.funcEndGame")
	f := &EndGameContext{
		Params: ImmutableEndGameParams{
			proxy: wasmlib.NewParamsProxy(),
		},
		State: MutablezentangleState{
			proxy: wasmlib.NewStateProxy(),
		},
	}
	funcEndGame(ctx, f)
	ctx.Log("zentangle.funcEndGame ok")
}

type InitContext struct {
	Events  zentangleEvents
	Params  ImmutableInitParams
	State   MutablezentangleState
}

func funcInitThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("zentangle.funcInit")
	f := &InitContext{
		Params: ImmutableInitParams{
			proxy: wasmlib.NewParamsProxy(),
		},
		State: MutablezentangleState{
			proxy: wasmlib.NewStateProxy(),
		},
	}
	funcInit(ctx, f)
	ctx.Log("zentangle.funcInit ok")
}

type RequestPlayContext struct {
	Events  zentangleEvents
	Results MutableRequestPlayResults
	State   MutablezentangleState
}

func funcRequestPlayThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("zentangle.funcRequestPlay")
	results := wasmlib.NewScDict()
	f := &RequestPlayContext{
		Results: MutableRequestPlayResults{
			proxy: results.AsProxy(),
		},
		State: MutablezentangleState{
			proxy: wasmlib.NewStateProxy(),
		},
	}
	funcRequestPlay(ctx, f)
	ctx.Results(results)
	ctx.Log("zentangle.funcRequestPlay ok")
}

type SendTagsContext struct {
	Events  zentangleEvents
	Params  ImmutableSendTagsParams
	Results MutableSendTagsResults
	State   MutablezentangleState
}

func funcSendTagsThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("zentangle.funcSendTags")
	results := wasmlib.NewScDict()
	f := &SendTagsContext{
		Params: ImmutableSendTagsParams{
			proxy: wasmlib.NewParamsProxy(),
		},
		Results: MutableSendTagsResults{
			proxy: results.AsProxy(),
		},
		State: MutablezentangleState{
			proxy: wasmlib.NewStateProxy(),
		},
	}
	ctx.Require(f.Params.InputJson().Exists(), "missing mandatory inputJson")
	funcSendTags(ctx, f)
	ctx.Results(results)
	ctx.Log("zentangle.funcSendTags ok")
}

type SetOwnerContext struct {
	Events  zentangleEvents
	Params  ImmutableSetOwnerParams
	State   MutablezentangleState
}

func funcSetOwnerThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("zentangle.funcSetOwner")
	f := &SetOwnerContext{
		Params: ImmutableSetOwnerParams{
			proxy: wasmlib.NewParamsProxy(),
		},
		State: MutablezentangleState{
			proxy: wasmlib.NewStateProxy(),
		},
	}

	// current owner of this smart contract
	access := f.State.Owner()
	ctx.Require(access.Exists(), "access not set: owner")
	ctx.Require(ctx.Caller() == access.Value(), "no permission")

	ctx.Require(f.Params.Owner().Exists(), "missing mandatory owner")
	funcSetOwner(ctx, f)
	ctx.Log("zentangle.funcSetOwner ok")
}

type WithdrawContext struct {
	Events  zentangleEvents
	State   MutablezentangleState
}

func funcWithdrawThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("zentangle.funcWithdraw")
	f := &WithdrawContext{
		State: MutablezentangleState{
			proxy: wasmlib.NewStateProxy(),
		},
	}

	// current owner of this smart contract
	access := f.State.Owner()
	ctx.Require(access.Exists(), "access not set: owner")
	ctx.Require(ctx.Caller() == access.Value(), "no permission")

	funcWithdraw(ctx, f)
	ctx.Log("zentangle.funcWithdraw ok")
}

type GetOwnerContext struct {
	Results MutableGetOwnerResults
	State   ImmutablezentangleState
}

func viewGetOwnerThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("zentangle.viewGetOwner")
	results := wasmlib.NewScDict()
	f := &GetOwnerContext{
		Results: MutableGetOwnerResults{
			proxy: results.AsProxy(),
		},
		State: ImmutablezentangleState{
			proxy: wasmlib.NewStateProxy(),
		},
	}
	viewGetOwner(ctx, f)
	ctx.Results(results)
	ctx.Log("zentangle.viewGetOwner ok")
}

type GetPlayerBetsContext struct {
	Results MutableGetPlayerBetsResults
	State   ImmutablezentangleState
}

func viewGetPlayerBetsThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("zentangle.viewGetPlayerBets")
	results := wasmlib.NewScDict()
	f := &GetPlayerBetsContext{
		Results: MutableGetPlayerBetsResults{
			proxy: results.AsProxy(),
		},
		State: ImmutablezentangleState{
			proxy: wasmlib.NewStateProxy(),
		},
	}
	viewGetPlayerBets(ctx, f)
	ctx.Results(results)
	ctx.Log("zentangle.viewGetPlayerBets ok")
}

type GetPlayerInfoContext struct {
	Params  ImmutableGetPlayerInfoParams
	Results MutableGetPlayerInfoResults
	State   ImmutablezentangleState
}

func viewGetPlayerInfoThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("zentangle.viewGetPlayerInfo")
	results := wasmlib.NewScDict()
	f := &GetPlayerInfoContext{
		Params: ImmutableGetPlayerInfoParams{
			proxy: wasmlib.NewParamsProxy(),
		},
		Results: MutableGetPlayerInfoResults{
			proxy: results.AsProxy(),
		},
		State: ImmutablezentangleState{
			proxy: wasmlib.NewStateProxy(),
		},
	}
	ctx.Require(f.Params.PlayerAddress().Exists(), "missing mandatory playerAddress")
	viewGetPlayerInfo(ctx, f)
	ctx.Results(results)
	ctx.Log("zentangle.viewGetPlayerInfo ok")
}

type GetPlaysPerImageContext struct {
	Params  ImmutableGetPlaysPerImageParams
	Results MutableGetPlaysPerImageResults
	State   ImmutablezentangleState
}

func viewGetPlaysPerImageThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("zentangle.viewGetPlaysPerImage")
	results := wasmlib.NewScDict()
	f := &GetPlaysPerImageContext{
		Params: ImmutableGetPlaysPerImageParams{
			proxy: wasmlib.NewParamsProxy(),
		},
		Results: MutableGetPlaysPerImageResults{
			proxy: results.AsProxy(),
		},
		State: ImmutablezentangleState{
			proxy: wasmlib.NewStateProxy(),
		},
	}
	ctx.Require(f.Params.ImageId().Exists(), "missing mandatory imageId")
	viewGetPlaysPerImage(ctx, f)
	ctx.Results(results)
	ctx.Log("zentangle.viewGetPlaysPerImage ok")
}

type GetResultsContext struct {
	Params  ImmutableGetResultsParams
	Results MutableGetResultsResults
	State   ImmutablezentangleState
}

func viewGetResultsThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("zentangle.viewGetResults")
	results := wasmlib.NewScDict()
	f := &GetResultsContext{
		Params: ImmutableGetResultsParams{
			proxy: wasmlib.NewParamsProxy(),
		},
		Results: MutableGetResultsResults{
			proxy: results.AsProxy(),
		},
		State: ImmutablezentangleState{
			proxy: wasmlib.NewStateProxy(),
		},
	}
	ctx.Require(f.Params.ImageId().Exists(), "missing mandatory imageId")
	viewGetResults(ctx, f)
	ctx.Results(results)
	ctx.Log("zentangle.viewGetResults ok")
}
