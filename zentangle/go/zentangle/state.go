// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

package zentangle

import "github.com/iotaledger/wasp/packages/vm/wasmlib/go/wasmlib"

type ArrayOfImmutableBet struct {
	objID int32
}

func (a ArrayOfImmutableBet) Length() int32 {
	return wasmlib.GetLength(a.objID)
}

func (a ArrayOfImmutableBet) GetBet(index int32) ImmutableBet {
	return ImmutableBet{objID: a.objID, keyID: wasmlib.Key32(index)}
}

type MapStringToImmutableBet struct {
	objID int32
}

func (m MapStringToImmutableBet) GetBet(key string) ImmutableBet {
	return ImmutableBet{objID: m.objID, keyID: wasmlib.Key(key).KeyID()}
}

type MapStringToImmutablePlayerBoost struct {
	objID int32
}

func (m MapStringToImmutablePlayerBoost) GetPlayerBoost(key string) ImmutablePlayerBoost {
	return ImmutablePlayerBoost{objID: m.objID, keyID: wasmlib.Key(key).KeyID()}
}

type ArrayOfImmutablePlayerBoost struct {
	objID int32
}

func (a ArrayOfImmutablePlayerBoost) Length() int32 {
	return wasmlib.GetLength(a.objID)
}

func (a ArrayOfImmutablePlayerBoost) GetPlayerBoost(index int32) ImmutablePlayerBoost {
	return ImmutablePlayerBoost{objID: a.objID, keyID: wasmlib.Key32(index)}
}

type ArrayOfImmutableUint32 struct {
	objID int32
}

func (a ArrayOfImmutableUint32) Length() int32 {
	return wasmlib.GetLength(a.objID)
}

func (a ArrayOfImmutableUint32) GetUint32(index int32) wasmlib.ScImmutableUint32 {
	return wasmlib.NewScImmutableUint32(a.objID, wasmlib.Key32(index))
}

type ArrayOfImmutableTaggedImage struct {
	objID int32
}

func (a ArrayOfImmutableTaggedImage) Length() int32 {
	return wasmlib.GetLength(a.objID)
}

func (a ArrayOfImmutableTaggedImage) GetTaggedImage(index int32) ImmutableTaggedImage {
	return ImmutableTaggedImage{objID: a.objID, keyID: wasmlib.Key32(index)}
}

type MapStringToImmutableUint64 struct {
	objID int32
}

func (m MapStringToImmutableUint64) GetUint64(key string) wasmlib.ScImmutableUint64 {
	return wasmlib.NewScImmutableUint64(m.objID, wasmlib.Key(key).KeyID())
}

type ArrayOfImmutableValidTag struct {
	objID int32
}

func (a ArrayOfImmutableValidTag) Length() int32 {
	return wasmlib.GetLength(a.objID)
}

func (a ArrayOfImmutableValidTag) GetValidTag(index int32) ImmutableValidTag {
	return ImmutableValidTag{objID: a.objID, keyID: wasmlib.Key32(index)}
}

type ImmutablezentangleState struct {
	id int32
}

func (s ImmutablezentangleState) Bets() ArrayOfImmutableBet {
	arrID := wasmlib.GetObjectID(s.id, idxMap[IdxStateBets], wasmlib.TYPE_ARRAY|wasmlib.TYPE_BYTES)
	return ArrayOfImmutableBet{objID: arrID}
}

func (s ImmutablezentangleState) Creator() wasmlib.ScImmutableAgentID {
	return wasmlib.NewScImmutableAgentID(s.id, idxMap[IdxStateCreator])
}

func (s ImmutablezentangleState) Description() wasmlib.ScImmutableString {
	return wasmlib.NewScImmutableString(s.id, idxMap[IdxStateDescription])
}

func (s ImmutablezentangleState) NumberOfImages() wasmlib.ScImmutableUint32 {
	return wasmlib.NewScImmutableUint32(s.id, idxMap[IdxStateNumberOfImages])
}

func (s ImmutablezentangleState) Owner() wasmlib.ScImmutableAgentID {
	return wasmlib.NewScImmutableAgentID(s.id, idxMap[IdxStateOwner])
}

func (s ImmutablezentangleState) PendingPlay() MapStringToImmutableBet {
	mapID := wasmlib.GetObjectID(s.id, idxMap[IdxStatePendingPlay], wasmlib.TYPE_MAP)
	return MapStringToImmutableBet{objID: mapID}
}

func (s ImmutablezentangleState) PendingPlays() ArrayOfImmutableBet {
	arrID := wasmlib.GetObjectID(s.id, idxMap[IdxStatePendingPlays], wasmlib.TYPE_ARRAY|wasmlib.TYPE_BYTES)
	return ArrayOfImmutableBet{objID: arrID}
}

func (s ImmutablezentangleState) PlayerBoost() MapStringToImmutablePlayerBoost {
	mapID := wasmlib.GetObjectID(s.id, idxMap[IdxStatePlayerBoost], wasmlib.TYPE_MAP)
	return MapStringToImmutablePlayerBoost{objID: mapID}
}

func (s ImmutablezentangleState) PlayersBoost() ArrayOfImmutablePlayerBoost {
	arrID := wasmlib.GetObjectID(s.id, idxMap[IdxStatePlayersBoost], wasmlib.TYPE_ARRAY|wasmlib.TYPE_BYTES)
	return ArrayOfImmutablePlayerBoost{objID: arrID}
}

func (s ImmutablezentangleState) PlaysPerImage() ArrayOfImmutableUint32 {
	arrID := wasmlib.GetObjectID(s.id, idxMap[IdxStatePlaysPerImage], wasmlib.TYPE_ARRAY|wasmlib.TYPE_INT32)
	return ArrayOfImmutableUint32{objID: arrID}
}

func (s ImmutablezentangleState) ProcessedImages() ArrayOfImmutableTaggedImage {
	arrID := wasmlib.GetObjectID(s.id, idxMap[IdxStateProcessedImages], wasmlib.TYPE_ARRAY|wasmlib.TYPE_BYTES)
	return ArrayOfImmutableTaggedImage{objID: arrID}
}

func (s ImmutablezentangleState) Reward() wasmlib.ScImmutableUint64 {
	return wasmlib.NewScImmutableUint64(s.id, idxMap[IdxStateReward])
}

func (s ImmutablezentangleState) TaggedImages() ArrayOfImmutableTaggedImage {
	arrID := wasmlib.GetObjectID(s.id, idxMap[IdxStateTaggedImages], wasmlib.TYPE_ARRAY|wasmlib.TYPE_BYTES)
	return ArrayOfImmutableTaggedImage{objID: arrID}
}

func (s ImmutablezentangleState) TagsRequiredPerImage() wasmlib.ScImmutableUint32 {
	return wasmlib.NewScImmutableUint32(s.id, idxMap[IdxStateTagsRequiredPerImage])
}

func (s ImmutablezentangleState) TotalPlayerTags() MapStringToImmutableUint64 {
	mapID := wasmlib.GetObjectID(s.id, idxMap[IdxStateTotalPlayerTags], wasmlib.TYPE_MAP)
	return MapStringToImmutableUint64{objID: mapID}
}

func (s ImmutablezentangleState) ValidTags() ArrayOfImmutableValidTag {
	arrID := wasmlib.GetObjectID(s.id, idxMap[IdxStateValidTags], wasmlib.TYPE_ARRAY|wasmlib.TYPE_BYTES)
	return ArrayOfImmutableValidTag{objID: arrID}
}

type ArrayOfMutableBet struct {
	objID int32
}

func (a ArrayOfMutableBet) Clear() {
	wasmlib.Clear(a.objID)
}

func (a ArrayOfMutableBet) Length() int32 {
	return wasmlib.GetLength(a.objID)
}

func (a ArrayOfMutableBet) GetBet(index int32) MutableBet {
	return MutableBet{objID: a.objID, keyID: wasmlib.Key32(index)}
}

type MapStringToMutableBet struct {
	objID int32
}

func (m MapStringToMutableBet) Clear() {
	wasmlib.Clear(m.objID)
}

func (m MapStringToMutableBet) GetBet(key string) MutableBet {
	return MutableBet{objID: m.objID, keyID: wasmlib.Key(key).KeyID()}
}

type MapStringToMutablePlayerBoost struct {
	objID int32
}

func (m MapStringToMutablePlayerBoost) Clear() {
	wasmlib.Clear(m.objID)
}

func (m MapStringToMutablePlayerBoost) GetPlayerBoost(key string) MutablePlayerBoost {
	return MutablePlayerBoost{objID: m.objID, keyID: wasmlib.Key(key).KeyID()}
}

type ArrayOfMutablePlayerBoost struct {
	objID int32
}

func (a ArrayOfMutablePlayerBoost) Clear() {
	wasmlib.Clear(a.objID)
}

func (a ArrayOfMutablePlayerBoost) Length() int32 {
	return wasmlib.GetLength(a.objID)
}

func (a ArrayOfMutablePlayerBoost) GetPlayerBoost(index int32) MutablePlayerBoost {
	return MutablePlayerBoost{objID: a.objID, keyID: wasmlib.Key32(index)}
}

type ArrayOfMutableUint32 struct {
	objID int32
}

func (a ArrayOfMutableUint32) Clear() {
	wasmlib.Clear(a.objID)
}

func (a ArrayOfMutableUint32) Length() int32 {
	return wasmlib.GetLength(a.objID)
}

func (a ArrayOfMutableUint32) GetUint32(index int32) wasmlib.ScMutableUint32 {
	return wasmlib.NewScMutableUint32(a.objID, wasmlib.Key32(index))
}

type ArrayOfMutableTaggedImage struct {
	objID int32
}

func (a ArrayOfMutableTaggedImage) Clear() {
	wasmlib.Clear(a.objID)
}

func (a ArrayOfMutableTaggedImage) Length() int32 {
	return wasmlib.GetLength(a.objID)
}

func (a ArrayOfMutableTaggedImage) GetTaggedImage(index int32) MutableTaggedImage {
	return MutableTaggedImage{objID: a.objID, keyID: wasmlib.Key32(index)}
}

type MapStringToMutableUint64 struct {
	objID int32
}

func (m MapStringToMutableUint64) Clear() {
	wasmlib.Clear(m.objID)
}

func (m MapStringToMutableUint64) GetUint64(key string) wasmlib.ScMutableUint64 {
	return wasmlib.NewScMutableUint64(m.objID, wasmlib.Key(key).KeyID())
}

type ArrayOfMutableValidTag struct {
	objID int32
}

func (a ArrayOfMutableValidTag) Clear() {
	wasmlib.Clear(a.objID)
}

func (a ArrayOfMutableValidTag) Length() int32 {
	return wasmlib.GetLength(a.objID)
}

func (a ArrayOfMutableValidTag) GetValidTag(index int32) MutableValidTag {
	return MutableValidTag{objID: a.objID, keyID: wasmlib.Key32(index)}
}

type MutablezentangleState struct {
	id int32
}

func (s MutablezentangleState) AsImmutable() ImmutablezentangleState {
	return ImmutablezentangleState(s)
}

func (s MutablezentangleState) Bets() ArrayOfMutableBet {
	arrID := wasmlib.GetObjectID(s.id, idxMap[IdxStateBets], wasmlib.TYPE_ARRAY|wasmlib.TYPE_BYTES)
	return ArrayOfMutableBet{objID: arrID}
}

func (s MutablezentangleState) Creator() wasmlib.ScMutableAgentID {
	return wasmlib.NewScMutableAgentID(s.id, idxMap[IdxStateCreator])
}

func (s MutablezentangleState) Description() wasmlib.ScMutableString {
	return wasmlib.NewScMutableString(s.id, idxMap[IdxStateDescription])
}

func (s MutablezentangleState) NumberOfImages() wasmlib.ScMutableUint32 {
	return wasmlib.NewScMutableUint32(s.id, idxMap[IdxStateNumberOfImages])
}

func (s MutablezentangleState) Owner() wasmlib.ScMutableAgentID {
	return wasmlib.NewScMutableAgentID(s.id, idxMap[IdxStateOwner])
}

func (s MutablezentangleState) PendingPlay() MapStringToMutableBet {
	mapID := wasmlib.GetObjectID(s.id, idxMap[IdxStatePendingPlay], wasmlib.TYPE_MAP)
	return MapStringToMutableBet{objID: mapID}
}

func (s MutablezentangleState) PendingPlays() ArrayOfMutableBet {
	arrID := wasmlib.GetObjectID(s.id, idxMap[IdxStatePendingPlays], wasmlib.TYPE_ARRAY|wasmlib.TYPE_BYTES)
	return ArrayOfMutableBet{objID: arrID}
}

func (s MutablezentangleState) PlayerBoost() MapStringToMutablePlayerBoost {
	mapID := wasmlib.GetObjectID(s.id, idxMap[IdxStatePlayerBoost], wasmlib.TYPE_MAP)
	return MapStringToMutablePlayerBoost{objID: mapID}
}

func (s MutablezentangleState) PlayersBoost() ArrayOfMutablePlayerBoost {
	arrID := wasmlib.GetObjectID(s.id, idxMap[IdxStatePlayersBoost], wasmlib.TYPE_ARRAY|wasmlib.TYPE_BYTES)
	return ArrayOfMutablePlayerBoost{objID: arrID}
}

func (s MutablezentangleState) PlaysPerImage() ArrayOfMutableUint32 {
	arrID := wasmlib.GetObjectID(s.id, idxMap[IdxStatePlaysPerImage], wasmlib.TYPE_ARRAY|wasmlib.TYPE_INT32)
	return ArrayOfMutableUint32{objID: arrID}
}

func (s MutablezentangleState) ProcessedImages() ArrayOfMutableTaggedImage {
	arrID := wasmlib.GetObjectID(s.id, idxMap[IdxStateProcessedImages], wasmlib.TYPE_ARRAY|wasmlib.TYPE_BYTES)
	return ArrayOfMutableTaggedImage{objID: arrID}
}

func (s MutablezentangleState) Reward() wasmlib.ScMutableUint64 {
	return wasmlib.NewScMutableUint64(s.id, idxMap[IdxStateReward])
}

func (s MutablezentangleState) TaggedImages() ArrayOfMutableTaggedImage {
	arrID := wasmlib.GetObjectID(s.id, idxMap[IdxStateTaggedImages], wasmlib.TYPE_ARRAY|wasmlib.TYPE_BYTES)
	return ArrayOfMutableTaggedImage{objID: arrID}
}

func (s MutablezentangleState) TagsRequiredPerImage() wasmlib.ScMutableUint32 {
	return wasmlib.NewScMutableUint32(s.id, idxMap[IdxStateTagsRequiredPerImage])
}

func (s MutablezentangleState) TotalPlayerTags() MapStringToMutableUint64 {
	mapID := wasmlib.GetObjectID(s.id, idxMap[IdxStateTotalPlayerTags], wasmlib.TYPE_MAP)
	return MapStringToMutableUint64{objID: mapID}
}

func (s MutablezentangleState) ValidTags() ArrayOfMutableValidTag {
	arrID := wasmlib.GetObjectID(s.id, idxMap[IdxStateValidTags], wasmlib.TYPE_ARRAY|wasmlib.TYPE_BYTES)
	return ArrayOfMutableValidTag{objID: arrID}
}
