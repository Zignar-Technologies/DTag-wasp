// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

package zentangle

import "github.com/iotaledger/wasp/packages/vm/wasmlib/go/wasmlib"

type ArrayOfImmutableBet struct {
	objID int32
}

func (a ArrayOfImmutableBet) Length() int32 {
	return wasmlib.GetLength(a.objID)
}

func (a ArrayOfImmutableBet) GetBet(index int32) ImmutableBet {
	return ImmutableBet{objID: a.objID, keyID: wasmlib.Key32(index)}
}

type MapStringToImmutableBet struct {
	objID int32
}

func (m MapStringToImmutableBet) GetBet(key string) ImmutableBet {
	return ImmutableBet{objID: m.objID, keyID: wasmlib.Key(key).KeyID()}
}

type MapStringToImmutablePlayer struct {
	objID int32
}

func (m MapStringToImmutablePlayer) GetPlayer(key string) ImmutablePlayer {
	return ImmutablePlayer{objID: m.objID, keyID: wasmlib.Key(key).KeyID()}
}

type ArrayOfImmutablePlayer struct {
	objID int32
}

func (a ArrayOfImmutablePlayer) Length() int32 {
	return wasmlib.GetLength(a.objID)
}

func (a ArrayOfImmutablePlayer) GetPlayer(index int32) ImmutablePlayer {
	return ImmutablePlayer{objID: a.objID, keyID: wasmlib.Key32(index)}
}

type ArrayOfImmutableInt32 struct {
	objID int32
}

func (a ArrayOfImmutableInt32) Length() int32 {
	return wasmlib.GetLength(a.objID)
}

func (a ArrayOfImmutableInt32) GetInt32(index int32) wasmlib.ScImmutableInt32 {
	return wasmlib.NewScImmutableInt32(a.objID, wasmlib.Key32(index))
}

type ArrayOfImmutableTaggedImage struct {
	objID int32
}

func (a ArrayOfImmutableTaggedImage) Length() int32 {
	return wasmlib.GetLength(a.objID)
}

func (a ArrayOfImmutableTaggedImage) GetTaggedImage(index int32) ImmutableTaggedImage {
	return ImmutableTaggedImage{objID: a.objID, keyID: wasmlib.Key32(index)}
}

type ArrayOfImmutableValidTag struct {
	objID int32
}

func (a ArrayOfImmutableValidTag) Length() int32 {
	return wasmlib.GetLength(a.objID)
}

func (a ArrayOfImmutableValidTag) GetValidTag(index int32) ImmutableValidTag {
	return ImmutableValidTag{objID: a.objID, keyID: wasmlib.Key32(index)}
}

type ImmutablezentangleState struct {
	id int32
}

func (s ImmutablezentangleState) Bets() ArrayOfImmutableBet {
	arrID := wasmlib.GetObjectID(s.id, idxMap[IdxStateBets], wasmlib.TYPE_ARRAY|wasmlib.TYPE_BYTES)
	return ArrayOfImmutableBet{objID: arrID}
}

func (s ImmutablezentangleState) Creator() wasmlib.ScImmutableAgentID {
	return wasmlib.NewScImmutableAgentID(s.id, idxMap[IdxStateCreator])
}

func (s ImmutablezentangleState) Description() wasmlib.ScImmutableString {
	return wasmlib.NewScImmutableString(s.id, idxMap[IdxStateDescription])
}

func (s ImmutablezentangleState) NumberOfImages() wasmlib.ScImmutableInt32 {
	return wasmlib.NewScImmutableInt32(s.id, idxMap[IdxStateNumberOfImages])
}

func (s ImmutablezentangleState) Owner() wasmlib.ScImmutableAgentID {
	return wasmlib.NewScImmutableAgentID(s.id, idxMap[IdxStateOwner])
}

func (s ImmutablezentangleState) PendingPlay() MapStringToImmutableBet {
	mapID := wasmlib.GetObjectID(s.id, idxMap[IdxStatePendingPlay], wasmlib.TYPE_MAP)
	return MapStringToImmutableBet{objID: mapID}
}

func (s ImmutablezentangleState) PendingPlays() ArrayOfImmutableBet {
	arrID := wasmlib.GetObjectID(s.id, idxMap[IdxStatePendingPlays], wasmlib.TYPE_ARRAY|wasmlib.TYPE_BYTES)
	return ArrayOfImmutableBet{objID: arrID}
}

func (s ImmutablezentangleState) Player() MapStringToImmutablePlayer {
	mapID := wasmlib.GetObjectID(s.id, idxMap[IdxStatePlayer], wasmlib.TYPE_MAP)
	return MapStringToImmutablePlayer{objID: mapID}
}

func (s ImmutablezentangleState) Players() ArrayOfImmutablePlayer {
	arrID := wasmlib.GetObjectID(s.id, idxMap[IdxStatePlayers], wasmlib.TYPE_ARRAY|wasmlib.TYPE_BYTES)
	return ArrayOfImmutablePlayer{objID: arrID}
}

func (s ImmutablezentangleState) PlaysPerImage() ArrayOfImmutableInt32 {
	arrID := wasmlib.GetObjectID(s.id, idxMap[IdxStatePlaysPerImage], wasmlib.TYPE_ARRAY|wasmlib.TYPE_INT32)
	return ArrayOfImmutableInt32{objID: arrID}
}

func (s ImmutablezentangleState) ProcessedImages() ArrayOfImmutableTaggedImage {
	arrID := wasmlib.GetObjectID(s.id, idxMap[IdxStateProcessedImages], wasmlib.TYPE_ARRAY|wasmlib.TYPE_BYTES)
	return ArrayOfImmutableTaggedImage{objID: arrID}
}

func (s ImmutablezentangleState) Reward() wasmlib.ScImmutableInt64 {
	return wasmlib.NewScImmutableInt64(s.id, idxMap[IdxStateReward])
}

func (s ImmutablezentangleState) TaggedImages() ArrayOfImmutableTaggedImage {
	arrID := wasmlib.GetObjectID(s.id, idxMap[IdxStateTaggedImages], wasmlib.TYPE_ARRAY|wasmlib.TYPE_BYTES)
	return ArrayOfImmutableTaggedImage{objID: arrID}
}

func (s ImmutablezentangleState) TagsRequiredPerImage() wasmlib.ScImmutableInt32 {
	return wasmlib.NewScImmutableInt32(s.id, idxMap[IdxStateTagsRequiredPerImage])
}

func (s ImmutablezentangleState) ValidTags() ArrayOfImmutableValidTag {
	arrID := wasmlib.GetObjectID(s.id, idxMap[IdxStateValidTags], wasmlib.TYPE_ARRAY|wasmlib.TYPE_BYTES)
	return ArrayOfImmutableValidTag{objID: arrID}
}

type ArrayOfMutableBet struct {
	objID int32
}

func (a ArrayOfMutableBet) Clear() {
	wasmlib.Clear(a.objID)
}

func (a ArrayOfMutableBet) Length() int32 {
	return wasmlib.GetLength(a.objID)
}

func (a ArrayOfMutableBet) GetBet(index int32) MutableBet {
	return MutableBet{objID: a.objID, keyID: wasmlib.Key32(index)}
}

type MapStringToMutableBet struct {
	objID int32
}

func (m MapStringToMutableBet) Clear() {
	wasmlib.Clear(m.objID)
}

func (m MapStringToMutableBet) GetBet(key string) MutableBet {
	return MutableBet{objID: m.objID, keyID: wasmlib.Key(key).KeyID()}
}

type MapStringToMutablePlayer struct {
	objID int32
}

func (m MapStringToMutablePlayer) Clear() {
	wasmlib.Clear(m.objID)
}

func (m MapStringToMutablePlayer) GetPlayer(key string) MutablePlayer {
	return MutablePlayer{objID: m.objID, keyID: wasmlib.Key(key).KeyID()}
}

type ArrayOfMutablePlayer struct {
	objID int32
}

func (a ArrayOfMutablePlayer) Clear() {
	wasmlib.Clear(a.objID)
}

func (a ArrayOfMutablePlayer) Length() int32 {
	return wasmlib.GetLength(a.objID)
}

func (a ArrayOfMutablePlayer) GetPlayer(index int32) MutablePlayer {
	return MutablePlayer{objID: a.objID, keyID: wasmlib.Key32(index)}
}

type ArrayOfMutableInt32 struct {
	objID int32
}

func (a ArrayOfMutableInt32) Clear() {
	wasmlib.Clear(a.objID)
}

func (a ArrayOfMutableInt32) Length() int32 {
	return wasmlib.GetLength(a.objID)
}

func (a ArrayOfMutableInt32) GetInt32(index int32) wasmlib.ScMutableInt32 {
	return wasmlib.NewScMutableInt32(a.objID, wasmlib.Key32(index))
}

type ArrayOfMutableTaggedImage struct {
	objID int32
}

func (a ArrayOfMutableTaggedImage) Clear() {
	wasmlib.Clear(a.objID)
}

func (a ArrayOfMutableTaggedImage) Length() int32 {
	return wasmlib.GetLength(a.objID)
}

func (a ArrayOfMutableTaggedImage) GetTaggedImage(index int32) MutableTaggedImage {
	return MutableTaggedImage{objID: a.objID, keyID: wasmlib.Key32(index)}
}

type ArrayOfMutableValidTag struct {
	objID int32
}

func (a ArrayOfMutableValidTag) Clear() {
	wasmlib.Clear(a.objID)
}

func (a ArrayOfMutableValidTag) Length() int32 {
	return wasmlib.GetLength(a.objID)
}

func (a ArrayOfMutableValidTag) GetValidTag(index int32) MutableValidTag {
	return MutableValidTag{objID: a.objID, keyID: wasmlib.Key32(index)}
}

type MutablezentangleState struct {
	id int32
}

func (s MutablezentangleState) AsImmutable() ImmutablezentangleState {
	return ImmutablezentangleState(s)
}

func (s MutablezentangleState) Bets() ArrayOfMutableBet {
	arrID := wasmlib.GetObjectID(s.id, idxMap[IdxStateBets], wasmlib.TYPE_ARRAY|wasmlib.TYPE_BYTES)
	return ArrayOfMutableBet{objID: arrID}
}

func (s MutablezentangleState) Creator() wasmlib.ScMutableAgentID {
	return wasmlib.NewScMutableAgentID(s.id, idxMap[IdxStateCreator])
}

func (s MutablezentangleState) Description() wasmlib.ScMutableString {
	return wasmlib.NewScMutableString(s.id, idxMap[IdxStateDescription])
}

func (s MutablezentangleState) NumberOfImages() wasmlib.ScMutableInt32 {
	return wasmlib.NewScMutableInt32(s.id, idxMap[IdxStateNumberOfImages])
}

func (s MutablezentangleState) Owner() wasmlib.ScMutableAgentID {
	return wasmlib.NewScMutableAgentID(s.id, idxMap[IdxStateOwner])
}

func (s MutablezentangleState) PendingPlay() MapStringToMutableBet {
	mapID := wasmlib.GetObjectID(s.id, idxMap[IdxStatePendingPlay], wasmlib.TYPE_MAP)
	return MapStringToMutableBet{objID: mapID}
}

func (s MutablezentangleState) PendingPlays() ArrayOfMutableBet {
	arrID := wasmlib.GetObjectID(s.id, idxMap[IdxStatePendingPlays], wasmlib.TYPE_ARRAY|wasmlib.TYPE_BYTES)
	return ArrayOfMutableBet{objID: arrID}
}

func (s MutablezentangleState) Player() MapStringToMutablePlayer {
	mapID := wasmlib.GetObjectID(s.id, idxMap[IdxStatePlayer], wasmlib.TYPE_MAP)
	return MapStringToMutablePlayer{objID: mapID}
}

func (s MutablezentangleState) Players() ArrayOfMutablePlayer {
	arrID := wasmlib.GetObjectID(s.id, idxMap[IdxStatePlayers], wasmlib.TYPE_ARRAY|wasmlib.TYPE_BYTES)
	return ArrayOfMutablePlayer{objID: arrID}
}

func (s MutablezentangleState) PlaysPerImage() ArrayOfMutableInt32 {
	arrID := wasmlib.GetObjectID(s.id, idxMap[IdxStatePlaysPerImage], wasmlib.TYPE_ARRAY|wasmlib.TYPE_INT32)
	return ArrayOfMutableInt32{objID: arrID}
}

func (s MutablezentangleState) ProcessedImages() ArrayOfMutableTaggedImage {
	arrID := wasmlib.GetObjectID(s.id, idxMap[IdxStateProcessedImages], wasmlib.TYPE_ARRAY|wasmlib.TYPE_BYTES)
	return ArrayOfMutableTaggedImage{objID: arrID}
}

func (s MutablezentangleState) Reward() wasmlib.ScMutableInt64 {
	return wasmlib.NewScMutableInt64(s.id, idxMap[IdxStateReward])
}

func (s MutablezentangleState) TaggedImages() ArrayOfMutableTaggedImage {
	arrID := wasmlib.GetObjectID(s.id, idxMap[IdxStateTaggedImages], wasmlib.TYPE_ARRAY|wasmlib.TYPE_BYTES)
	return ArrayOfMutableTaggedImage{objID: arrID}
}

func (s MutablezentangleState) TagsRequiredPerImage() wasmlib.ScMutableInt32 {
	return wasmlib.NewScMutableInt32(s.id, idxMap[IdxStateTagsRequiredPerImage])
}

func (s MutablezentangleState) ValidTags() ArrayOfMutableValidTag {
	arrID := wasmlib.GetObjectID(s.id, idxMap[IdxStateValidTags], wasmlib.TYPE_ARRAY|wasmlib.TYPE_BYTES)
	return ArrayOfMutableValidTag{objID: arrID}
}
