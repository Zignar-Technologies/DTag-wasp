// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

#![allow(dead_code)]

use wasmlib::*;

pub struct ZentangleEvents {
}

impl ZentangleEvents {

	pub fn game_ended(&self) {
		EventEncoder::new("zentangle.gameEnded").emit();
	}

	pub fn game_started(&self, description: &str, number_of_images: u32, reward: u64, tags_required_per_image: u32) {
		let mut encoder = EventEncoder::new("zentangle.gameStarted");
		encoder.string(&description);
		encoder.uint32(number_of_images);
		encoder.uint64(reward);
		encoder.uint32(tags_required_per_image);
		encoder.emit();
	}

	pub fn imagetagged(&self, address: &str, image_id: u32, plays_per_image: u32) {
		let mut encoder = EventEncoder::new("zentangle.imagetagged");
		encoder.string(&address);
		encoder.uint32(image_id);
		encoder.uint32(plays_per_image);
		encoder.emit();
	}

	pub fn paid(&self, accuracy: &str, amount: u64, boost: u8, player: &str, position: u64) {
		let mut encoder = EventEncoder::new("zentangle.paid");
		encoder.string(&accuracy);
		encoder.uint64(amount);
		encoder.uint8(boost);
		encoder.string(&player);
		encoder.uint64(position);
		encoder.emit();
	}

	pub fn play_requested(&self, address: &str, amount: u64, image_id: u32) {
		let mut encoder = EventEncoder::new("zentangle.playRequested");
		encoder.string(&address);
		encoder.uint64(amount);
		encoder.uint32(image_id);
		encoder.emit();
	}
}
