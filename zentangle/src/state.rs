// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

#![allow(dead_code)]
#![allow(unused_imports)]

use wasmlib::*;

use crate::*;

#[derive(Clone)]
pub struct ArrayOfImmutableBet {
	pub(crate) proxy: Proxy,
}

impl ArrayOfImmutableBet {
    pub fn length(&self) -> u32 {
        self.proxy.length()
    }


	pub fn get_bet(&self, index: u32) -> ImmutableBet {
		ImmutableBet { proxy: self.proxy.index(index) }
	}
}

#[derive(Clone)]
pub struct MapStringToImmutableBet {
	pub(crate) proxy: Proxy,
}

impl MapStringToImmutableBet {
    pub fn get_bet(&self, key: &str) -> ImmutableBet {
        ImmutableBet { proxy: self.proxy.key(&string_to_bytes(key)) }
    }
}

#[derive(Clone)]
pub struct MapStringToImmutablePlayerInfo {
	pub(crate) proxy: Proxy,
}

impl MapStringToImmutablePlayerInfo {
    pub fn get_player_info(&self, key: &str) -> ImmutablePlayerInfo {
        ImmutablePlayerInfo { proxy: self.proxy.key(&string_to_bytes(key)) }
    }
}

#[derive(Clone)]
pub struct ArrayOfImmutableString {
	pub(crate) proxy: Proxy,
}

impl ArrayOfImmutableString {
    pub fn length(&self) -> u32 {
        self.proxy.length()
    }

    pub fn get_string(&self, index: u32) -> ScImmutableString {
        ScImmutableString::new(self.proxy.index(index))
    }
}

#[derive(Clone)]
pub struct ArrayOfImmutableUint32 {
	pub(crate) proxy: Proxy,
}

impl ArrayOfImmutableUint32 {
    pub fn length(&self) -> u32 {
        self.proxy.length()
    }

    pub fn get_uint32(&self, index: u32) -> ScImmutableUint32 {
        ScImmutableUint32::new(self.proxy.index(index))
    }
}

#[derive(Clone)]
pub struct ArrayOfImmutableTgdImg {
	pub(crate) proxy: Proxy,
}

impl ArrayOfImmutableTgdImg {
    pub fn length(&self) -> u32 {
        self.proxy.length()
    }


	pub fn get_tgd_img(&self, index: u32) -> ImmutableTgdImg {
		ImmutableTgdImg { proxy: self.proxy.index(index) }
	}
}

#[derive(Clone)]
pub struct MapStringToImmutableUint64 {
	pub(crate) proxy: Proxy,
}

impl MapStringToImmutableUint64 {
    pub fn get_uint64(&self, key: &str) -> ScImmutableUint64 {
        ScImmutableUint64::new(self.proxy.key(&string_to_bytes(key)))
    }
}

#[derive(Clone)]
pub struct ArrayOfImmutableValidTag {
	pub(crate) proxy: Proxy,
}

impl ArrayOfImmutableValidTag {
    pub fn length(&self) -> u32 {
        self.proxy.length()
    }


	pub fn get_valid_tag(&self, index: u32) -> ImmutableValidTag {
		ImmutableValidTag { proxy: self.proxy.index(index) }
	}
}

#[derive(Clone)]
pub struct ImmutablezentangleState {
	pub(crate) proxy: Proxy,
}

impl ImmutablezentangleState {
    pub fn bets(&self) -> ArrayOfImmutableBet {
		ArrayOfImmutableBet { proxy: self.proxy.root(STATE_BETS) }
	}

    pub fn complete_images(&self) -> ScImmutableUint32 {
		ScImmutableUint32::new(self.proxy.root(STATE_COMPLETE_IMAGES))
	}

    pub fn creator(&self) -> ScImmutableAgentID {
		ScImmutableAgentID::new(self.proxy.root(STATE_CREATOR))
	}

    pub fn description(&self) -> ScImmutableString {
		ScImmutableString::new(self.proxy.root(STATE_DESCRIPTION))
	}

    pub fn number_of_images(&self) -> ScImmutableUint32 {
		ScImmutableUint32::new(self.proxy.root(STATE_NUMBER_OF_IMAGES))
	}

    pub fn owner(&self) -> ScImmutableAgentID {
		ScImmutableAgentID::new(self.proxy.root(STATE_OWNER))
	}

    pub fn pending_play(&self) -> MapStringToImmutableBet {
		MapStringToImmutableBet { proxy: self.proxy.root(STATE_PENDING_PLAY) }
	}

    pub fn pending_plays(&self) -> ArrayOfImmutableBet {
		ArrayOfImmutableBet { proxy: self.proxy.root(STATE_PENDING_PLAYS) }
	}

    pub fn player_info(&self) -> MapStringToImmutablePlayerInfo {
		MapStringToImmutablePlayerInfo { proxy: self.proxy.root(STATE_PLAYER_INFO) }
	}

    pub fn players_info(&self) -> ArrayOfImmutableString {
		ArrayOfImmutableString { proxy: self.proxy.root(STATE_PLAYERS_INFO) }
	}

    pub fn plays_per_image(&self) -> ArrayOfImmutableUint32 {
		ArrayOfImmutableUint32 { proxy: self.proxy.root(STATE_PLAYS_PER_IMAGE) }
	}

    pub fn plays_required_per_image(&self) -> ScImmutableUint32 {
		ScImmutableUint32::new(self.proxy.root(STATE_PLAYS_REQUIRED_PER_IMAGE))
	}

    pub fn processed_images(&self) -> ArrayOfImmutableTgdImg {
		ArrayOfImmutableTgdImg { proxy: self.proxy.root(STATE_PROCESSED_IMAGES) }
	}

    pub fn reward(&self) -> ScImmutableUint64 {
		ScImmutableUint64::new(self.proxy.root(STATE_REWARD))
	}

    pub fn tgd_imgs(&self) -> ArrayOfImmutableTgdImg {
		ArrayOfImmutableTgdImg { proxy: self.proxy.root(STATE_TGD_IMGS) }
	}

    pub fn total_player_tags(&self) -> MapStringToImmutableUint64 {
		MapStringToImmutableUint64 { proxy: self.proxy.root(STATE_TOTAL_PLAYER_TAGS) }
	}

    pub fn valid_tags(&self) -> ArrayOfImmutableValidTag {
		ArrayOfImmutableValidTag { proxy: self.proxy.root(STATE_VALID_TAGS) }
	}
}

#[derive(Clone)]
pub struct ArrayOfMutableBet {
	pub(crate) proxy: Proxy,
}

impl ArrayOfMutableBet {

	pub fn append_bet(&self) -> MutableBet {
		MutableBet { proxy: self.proxy.append() }
	}
	pub fn clear(&self) {
        self.proxy.clear_array();
    }

    pub fn length(&self) -> u32 {
        self.proxy.length()
    }


	pub fn get_bet(&self, index: u32) -> MutableBet {
		MutableBet { proxy: self.proxy.index(index) }
	}
}

#[derive(Clone)]
pub struct MapStringToMutableBet {
	pub(crate) proxy: Proxy,
}

impl MapStringToMutableBet {
    pub fn clear(&self) {
        self.proxy.clear_map();
    }

    pub fn get_bet(&self, key: &str) -> MutableBet {
        MutableBet { proxy: self.proxy.key(&string_to_bytes(key)) }
    }
}

#[derive(Clone)]
pub struct MapStringToMutablePlayerInfo {
	pub(crate) proxy: Proxy,
}

impl MapStringToMutablePlayerInfo {
    pub fn clear(&self) {
        self.proxy.clear_map();
    }

    pub fn get_player_info(&self, key: &str) -> MutablePlayerInfo {
        MutablePlayerInfo { proxy: self.proxy.key(&string_to_bytes(key)) }
    }
}

#[derive(Clone)]
pub struct ArrayOfMutableString {
	pub(crate) proxy: Proxy,
}

impl ArrayOfMutableString {
	pub fn append_string(&self) -> ScMutableString {
		ScMutableString::new(self.proxy.append())
	}

	pub fn clear(&self) {
        self.proxy.clear_array();
    }

    pub fn length(&self) -> u32 {
        self.proxy.length()
    }

    pub fn get_string(&self, index: u32) -> ScMutableString {
        ScMutableString::new(self.proxy.index(index))
    }
}

#[derive(Clone)]
pub struct ArrayOfMutableUint32 {
	pub(crate) proxy: Proxy,
}

impl ArrayOfMutableUint32 {
	pub fn append_uint32(&self) -> ScMutableUint32 {
		ScMutableUint32::new(self.proxy.append())
	}

	pub fn clear(&self) {
        self.proxy.clear_array();
    }

    pub fn length(&self) -> u32 {
        self.proxy.length()
    }

    pub fn get_uint32(&self, index: u32) -> ScMutableUint32 {
        ScMutableUint32::new(self.proxy.index(index))
    }
}

#[derive(Clone)]
pub struct ArrayOfMutableTgdImg {
	pub(crate) proxy: Proxy,
}

impl ArrayOfMutableTgdImg {

	pub fn append_tgd_img(&self) -> MutableTgdImg {
		MutableTgdImg { proxy: self.proxy.append() }
	}
	pub fn clear(&self) {
        self.proxy.clear_array();
    }

    pub fn length(&self) -> u32 {
        self.proxy.length()
    }


	pub fn get_tgd_img(&self, index: u32) -> MutableTgdImg {
		MutableTgdImg { proxy: self.proxy.index(index) }
	}
}

#[derive(Clone)]
pub struct MapStringToMutableUint64 {
	pub(crate) proxy: Proxy,
}

impl MapStringToMutableUint64 {
    pub fn clear(&self) {
        self.proxy.clear_map();
    }

    pub fn get_uint64(&self, key: &str) -> ScMutableUint64 {
        ScMutableUint64::new(self.proxy.key(&string_to_bytes(key)))
    }
}

#[derive(Clone)]
pub struct ArrayOfMutableValidTag {
	pub(crate) proxy: Proxy,
}

impl ArrayOfMutableValidTag {

	pub fn append_valid_tag(&self) -> MutableValidTag {
		MutableValidTag { proxy: self.proxy.append() }
	}
	pub fn clear(&self) {
        self.proxy.clear_array();
    }

    pub fn length(&self) -> u32 {
        self.proxy.length()
    }


	pub fn get_valid_tag(&self, index: u32) -> MutableValidTag {
		MutableValidTag { proxy: self.proxy.index(index) }
	}
}

#[derive(Clone)]
pub struct MutablezentangleState {
	pub(crate) proxy: Proxy,
}

impl MutablezentangleState {
    pub fn as_immutable(&self) -> ImmutablezentangleState {
		ImmutablezentangleState { proxy: self.proxy.root("") }
	}

    pub fn bets(&self) -> ArrayOfMutableBet {
		ArrayOfMutableBet { proxy: self.proxy.root(STATE_BETS) }
	}

    pub fn complete_images(&self) -> ScMutableUint32 {
		ScMutableUint32::new(self.proxy.root(STATE_COMPLETE_IMAGES))
	}

    pub fn creator(&self) -> ScMutableAgentID {
		ScMutableAgentID::new(self.proxy.root(STATE_CREATOR))
	}

    pub fn description(&self) -> ScMutableString {
		ScMutableString::new(self.proxy.root(STATE_DESCRIPTION))
	}

    pub fn number_of_images(&self) -> ScMutableUint32 {
		ScMutableUint32::new(self.proxy.root(STATE_NUMBER_OF_IMAGES))
	}

    pub fn owner(&self) -> ScMutableAgentID {
		ScMutableAgentID::new(self.proxy.root(STATE_OWNER))
	}

    pub fn pending_play(&self) -> MapStringToMutableBet {
		MapStringToMutableBet { proxy: self.proxy.root(STATE_PENDING_PLAY) }
	}

    pub fn pending_plays(&self) -> ArrayOfMutableBet {
		ArrayOfMutableBet { proxy: self.proxy.root(STATE_PENDING_PLAYS) }
	}

    pub fn player_info(&self) -> MapStringToMutablePlayerInfo {
		MapStringToMutablePlayerInfo { proxy: self.proxy.root(STATE_PLAYER_INFO) }
	}

    pub fn players_info(&self) -> ArrayOfMutableString {
		ArrayOfMutableString { proxy: self.proxy.root(STATE_PLAYERS_INFO) }
	}

    pub fn plays_per_image(&self) -> ArrayOfMutableUint32 {
		ArrayOfMutableUint32 { proxy: self.proxy.root(STATE_PLAYS_PER_IMAGE) }
	}

    pub fn plays_required_per_image(&self) -> ScMutableUint32 {
		ScMutableUint32::new(self.proxy.root(STATE_PLAYS_REQUIRED_PER_IMAGE))
	}

    pub fn processed_images(&self) -> ArrayOfMutableTgdImg {
		ArrayOfMutableTgdImg { proxy: self.proxy.root(STATE_PROCESSED_IMAGES) }
	}

    pub fn reward(&self) -> ScMutableUint64 {
		ScMutableUint64::new(self.proxy.root(STATE_REWARD))
	}

    pub fn tgd_imgs(&self) -> ArrayOfMutableTgdImg {
		ArrayOfMutableTgdImg { proxy: self.proxy.root(STATE_TGD_IMGS) }
	}

    pub fn total_player_tags(&self) -> MapStringToMutableUint64 {
		MapStringToMutableUint64 { proxy: self.proxy.root(STATE_TOTAL_PLAYER_TAGS) }
	}

    pub fn valid_tags(&self) -> ArrayOfMutableValidTag {
		ArrayOfMutableValidTag { proxy: self.proxy.root(STATE_VALID_TAGS) }
	}
}
