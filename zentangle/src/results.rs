// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

#![allow(dead_code)]
#![allow(unused_imports)]

use wasmlib::*;
use crate::*;

#[derive(Clone)]
pub struct ImmutableRequestPlayResults {
	pub(crate) proxy: Proxy,
}

impl ImmutableRequestPlayResults {
    pub fn image_id(&self) -> ScImmutableUint32 {
		ScImmutableUint32::new(self.proxy.root(RESULT_IMAGE_ID))
	}
}

#[derive(Clone)]
pub struct MutableRequestPlayResults {
	pub(crate) proxy: Proxy,
}

impl MutableRequestPlayResults {
    pub fn image_id(&self) -> ScMutableUint32 {
		ScMutableUint32::new(self.proxy.root(RESULT_IMAGE_ID))
	}
}

#[derive(Clone)]
pub struct ImmutableSendTagsResults {
	pub(crate) proxy: Proxy,
}

impl ImmutableSendTagsResults {
    pub fn image_id(&self) -> ScImmutableUint32 {
		ScImmutableUint32::new(self.proxy.root(RESULT_IMAGE_ID))
	}
}

#[derive(Clone)]
pub struct MutableSendTagsResults {
	pub(crate) proxy: Proxy,
}

impl MutableSendTagsResults {
    pub fn image_id(&self) -> ScMutableUint32 {
		ScMutableUint32::new(self.proxy.root(RESULT_IMAGE_ID))
	}
}

#[derive(Clone)]
pub struct ImmutableGetOwnerResults {
	pub(crate) proxy: Proxy,
}

impl ImmutableGetOwnerResults {
    pub fn owner(&self) -> ScImmutableAgentID {
		ScImmutableAgentID::new(self.proxy.root(RESULT_OWNER))
	}
}

#[derive(Clone)]
pub struct MutableGetOwnerResults {
	pub(crate) proxy: Proxy,
}

impl MutableGetOwnerResults {
    pub fn owner(&self) -> ScMutableAgentID {
		ScMutableAgentID::new(self.proxy.root(RESULT_OWNER))
	}
}

#[derive(Clone)]
pub struct ImmutableGetPlayerBetsResults {
	pub(crate) proxy: Proxy,
}

impl ImmutableGetPlayerBetsResults {
    pub fn player_bets(&self) -> ScImmutableString {
		ScImmutableString::new(self.proxy.root(RESULT_PLAYER_BETS))
	}
}

#[derive(Clone)]
pub struct MutableGetPlayerBetsResults {
	pub(crate) proxy: Proxy,
}

impl MutableGetPlayerBetsResults {
    pub fn player_bets(&self) -> ScMutableString {
		ScMutableString::new(self.proxy.root(RESULT_PLAYER_BETS))
	}
}

#[derive(Clone)]
pub struct ImmutableGetPlayerInfoResults {
	pub(crate) proxy: Proxy,
}

impl ImmutableGetPlayerInfoResults {
    pub fn info(&self) -> ScImmutableString {
		ScImmutableString::new(self.proxy.root(RESULT_INFO))
	}
}

#[derive(Clone)]
pub struct MutableGetPlayerInfoResults {
	pub(crate) proxy: Proxy,
}

impl MutableGetPlayerInfoResults {
    pub fn info(&self) -> ScMutableString {
		ScMutableString::new(self.proxy.root(RESULT_INFO))
	}
}

#[derive(Clone)]
pub struct ImmutableGetPlaysPerImageResults {
	pub(crate) proxy: Proxy,
}

impl ImmutableGetPlaysPerImageResults {
    pub fn plays_per_image(&self) -> ScImmutableUint32 {
		ScImmutableUint32::new(self.proxy.root(RESULT_PLAYS_PER_IMAGE))
	}
}

#[derive(Clone)]
pub struct MutableGetPlaysPerImageResults {
	pub(crate) proxy: Proxy,
}

impl MutableGetPlaysPerImageResults {
    pub fn plays_per_image(&self) -> ScMutableUint32 {
		ScMutableUint32::new(self.proxy.root(RESULT_PLAYS_PER_IMAGE))
	}
}

#[derive(Clone)]
pub struct ImmutableGetResultsResults {
	pub(crate) proxy: Proxy,
}

impl ImmutableGetResultsResults {
    pub fn results(&self) -> ScImmutableString {
		ScImmutableString::new(self.proxy.root(RESULT_RESULTS))
	}
}

#[derive(Clone)]
pub struct MutableGetResultsResults {
	pub(crate) proxy: Proxy,
}

impl MutableGetResultsResults {
    pub fn results(&self) -> ScMutableString {
		ScMutableString::new(self.proxy.root(RESULT_RESULTS))
	}
}
