// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

#![allow(dead_code)]
#![allow(unused_imports)]

use wasmlib::*;
use wasmlib::host::*;

use crate::*;
use crate::keys::*;
use crate::structs::*;

#[derive(Clone, Copy)]
pub struct ImmutableRequestPlayResults {
    pub(crate) id: i32,
}

impl ImmutableRequestPlayResults {
    pub fn image_id(&self) -> ScImmutableUint32 {
		ScImmutableUint32::new(self.id, idx_map(IDX_RESULT_IMAGE_ID))
	}
}

#[derive(Clone, Copy)]
pub struct MutableRequestPlayResults {
    pub(crate) id: i32,
}

impl MutableRequestPlayResults {
    pub fn image_id(&self) -> ScMutableUint32 {
		ScMutableUint32::new(self.id, idx_map(IDX_RESULT_IMAGE_ID))
	}
}

#[derive(Clone, Copy)]
pub struct ImmutableSendTagsResults {
    pub(crate) id: i32,
}

impl ImmutableSendTagsResults {
    pub fn image_id(&self) -> ScImmutableUint32 {
		ScImmutableUint32::new(self.id, idx_map(IDX_RESULT_IMAGE_ID))
	}
}

#[derive(Clone, Copy)]
pub struct MutableSendTagsResults {
    pub(crate) id: i32,
}

impl MutableSendTagsResults {
    pub fn image_id(&self) -> ScMutableUint32 {
		ScMutableUint32::new(self.id, idx_map(IDX_RESULT_IMAGE_ID))
	}
}

#[derive(Clone, Copy)]
pub struct ImmutableGetOwnerResults {
    pub(crate) id: i32,
}

impl ImmutableGetOwnerResults {
    pub fn owner(&self) -> ScImmutableAgentID {
		ScImmutableAgentID::new(self.id, idx_map(IDX_RESULT_OWNER))
	}
}

#[derive(Clone, Copy)]
pub struct MutableGetOwnerResults {
    pub(crate) id: i32,
}

impl MutableGetOwnerResults {
    pub fn owner(&self) -> ScMutableAgentID {
		ScMutableAgentID::new(self.id, idx_map(IDX_RESULT_OWNER))
	}
}

#[derive(Clone, Copy)]
pub struct ImmutableGetPlayerBetsResults {
    pub(crate) id: i32,
}

impl ImmutableGetPlayerBetsResults {
    pub fn player_bets(&self) -> ScImmutableString {
		ScImmutableString::new(self.id, idx_map(IDX_RESULT_PLAYER_BETS))
	}
}

#[derive(Clone, Copy)]
pub struct MutableGetPlayerBetsResults {
    pub(crate) id: i32,
}

impl MutableGetPlayerBetsResults {
    pub fn player_bets(&self) -> ScMutableString {
		ScMutableString::new(self.id, idx_map(IDX_RESULT_PLAYER_BETS))
	}
}

#[derive(Clone, Copy)]
pub struct ImmutableGetPlayerInfoResults {
    pub(crate) id: i32,
}

impl ImmutableGetPlayerInfoResults {
    pub fn info(&self) -> ScImmutableString {
		ScImmutableString::new(self.id, idx_map(IDX_RESULT_INFO))
	}
}

#[derive(Clone, Copy)]
pub struct MutableGetPlayerInfoResults {
    pub(crate) id: i32,
}

impl MutableGetPlayerInfoResults {
    pub fn info(&self) -> ScMutableString {
		ScMutableString::new(self.id, idx_map(IDX_RESULT_INFO))
	}
}

#[derive(Clone, Copy)]
pub struct ImmutableGetPlaysPerImageResults {
    pub(crate) id: i32,
}

impl ImmutableGetPlaysPerImageResults {
    pub fn plays_per_image(&self) -> ScImmutableUint32 {
		ScImmutableUint32::new(self.id, idx_map(IDX_RESULT_PLAYS_PER_IMAGE))
	}
}

#[derive(Clone, Copy)]
pub struct MutableGetPlaysPerImageResults {
    pub(crate) id: i32,
}

impl MutableGetPlaysPerImageResults {
    pub fn plays_per_image(&self) -> ScMutableUint32 {
		ScMutableUint32::new(self.id, idx_map(IDX_RESULT_PLAYS_PER_IMAGE))
	}
}

#[derive(Clone, Copy)]
pub struct ImmutableGetResultsResults {
    pub(crate) id: i32,
}

impl ImmutableGetResultsResults {
    pub fn results(&self) -> ScImmutableString {
		ScImmutableString::new(self.id, idx_map(IDX_RESULT_RESULTS))
	}
}

#[derive(Clone, Copy)]
pub struct MutableGetResultsResults {
    pub(crate) id: i32,
}

impl MutableGetResultsResults {
    pub fn results(&self) -> ScMutableString {
		ScMutableString::new(self.id, idx_map(IDX_RESULT_RESULTS))
	}
}
