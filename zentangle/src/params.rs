// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

#![allow(dead_code)]
#![allow(unused_imports)]

use wasmlib::*;
use wasmlib::host::*;

use crate::*;
use crate::keys::*;
use crate::structs::*;

#[derive(Clone, Copy)]
pub struct ImmutableCreateGameParams {
    pub(crate) id: i32,
}

impl ImmutableCreateGameParams {
    pub fn description(&self) -> ScImmutableString {
		ScImmutableString::new(self.id, idx_map(IDX_PARAM_DESCRIPTION))
	}

    pub fn number_of_images(&self) -> ScImmutableUint32 {
		ScImmutableUint32::new(self.id, idx_map(IDX_PARAM_NUMBER_OF_IMAGES))
	}

    pub fn tags_required_per_image(&self) -> ScImmutableUint32 {
		ScImmutableUint32::new(self.id, idx_map(IDX_PARAM_TAGS_REQUIRED_PER_IMAGE))
	}
}

#[derive(Clone, Copy)]
pub struct MutableCreateGameParams {
    pub(crate) id: i32,
}

impl MutableCreateGameParams {
    pub fn description(&self) -> ScMutableString {
		ScMutableString::new(self.id, idx_map(IDX_PARAM_DESCRIPTION))
	}

    pub fn number_of_images(&self) -> ScMutableUint32 {
		ScMutableUint32::new(self.id, idx_map(IDX_PARAM_NUMBER_OF_IMAGES))
	}

    pub fn tags_required_per_image(&self) -> ScMutableUint32 {
		ScMutableUint32::new(self.id, idx_map(IDX_PARAM_TAGS_REQUIRED_PER_IMAGE))
	}
}

#[derive(Clone, Copy)]
pub struct ImmutableEndGameParams {
    pub(crate) id: i32,
}

impl ImmutableEndGameParams {
    pub fn reset_player_info(&self) -> ScImmutableBool {
		ScImmutableBool::new(self.id, idx_map(IDX_PARAM_RESET_PLAYER_INFO))
	}
}

#[derive(Clone, Copy)]
pub struct MutableEndGameParams {
    pub(crate) id: i32,
}

impl MutableEndGameParams {
    pub fn reset_player_info(&self) -> ScMutableBool {
		ScMutableBool::new(self.id, idx_map(IDX_PARAM_RESET_PLAYER_INFO))
	}
}

#[derive(Clone, Copy)]
pub struct ImmutableInitParams {
    pub(crate) id: i32,
}

impl ImmutableInitParams {
    pub fn owner(&self) -> ScImmutableAgentID {
		ScImmutableAgentID::new(self.id, idx_map(IDX_PARAM_OWNER))
	}
}

#[derive(Clone, Copy)]
pub struct MutableInitParams {
    pub(crate) id: i32,
}

impl MutableInitParams {
    pub fn owner(&self) -> ScMutableAgentID {
		ScMutableAgentID::new(self.id, idx_map(IDX_PARAM_OWNER))
	}
}

#[derive(Clone, Copy)]
pub struct ImmutableSendTagsParams {
    pub(crate) id: i32,
}

impl ImmutableSendTagsParams {
    pub fn input_json(&self) -> ScImmutableString {
		ScImmutableString::new(self.id, idx_map(IDX_PARAM_INPUT_JSON))
	}
}

#[derive(Clone, Copy)]
pub struct MutableSendTagsParams {
    pub(crate) id: i32,
}

impl MutableSendTagsParams {
    pub fn input_json(&self) -> ScMutableString {
		ScMutableString::new(self.id, idx_map(IDX_PARAM_INPUT_JSON))
	}
}

#[derive(Clone, Copy)]
pub struct ImmutableSetOwnerParams {
    pub(crate) id: i32,
}

impl ImmutableSetOwnerParams {
    pub fn owner(&self) -> ScImmutableAgentID {
		ScImmutableAgentID::new(self.id, idx_map(IDX_PARAM_OWNER))
	}
}

#[derive(Clone, Copy)]
pub struct MutableSetOwnerParams {
    pub(crate) id: i32,
}

impl MutableSetOwnerParams {
    pub fn owner(&self) -> ScMutableAgentID {
		ScMutableAgentID::new(self.id, idx_map(IDX_PARAM_OWNER))
	}
}

#[derive(Clone, Copy)]
pub struct ImmutableGetPlayerInfoParams {
    pub(crate) id: i32,
}

impl ImmutableGetPlayerInfoParams {
    pub fn player_address(&self) -> ScImmutableString {
		ScImmutableString::new(self.id, idx_map(IDX_PARAM_PLAYER_ADDRESS))
	}
}

#[derive(Clone, Copy)]
pub struct MutableGetPlayerInfoParams {
    pub(crate) id: i32,
}

impl MutableGetPlayerInfoParams {
    pub fn player_address(&self) -> ScMutableString {
		ScMutableString::new(self.id, idx_map(IDX_PARAM_PLAYER_ADDRESS))
	}
}

#[derive(Clone, Copy)]
pub struct ImmutableGetPlaysPerImageParams {
    pub(crate) id: i32,
}

impl ImmutableGetPlaysPerImageParams {
    pub fn image_id(&self) -> ScImmutableUint32 {
		ScImmutableUint32::new(self.id, idx_map(IDX_PARAM_IMAGE_ID))
	}
}

#[derive(Clone, Copy)]
pub struct MutableGetPlaysPerImageParams {
    pub(crate) id: i32,
}

impl MutableGetPlaysPerImageParams {
    pub fn image_id(&self) -> ScMutableUint32 {
		ScMutableUint32::new(self.id, idx_map(IDX_PARAM_IMAGE_ID))
	}
}

#[derive(Clone, Copy)]
pub struct ImmutableGetResultsParams {
    pub(crate) id: i32,
}

impl ImmutableGetResultsParams {
    pub fn image_id(&self) -> ScImmutableUint32 {
		ScImmutableUint32::new(self.id, idx_map(IDX_PARAM_IMAGE_ID))
	}
}

#[derive(Clone, Copy)]
pub struct MutableGetResultsParams {
    pub(crate) id: i32,
}

impl MutableGetResultsParams {
    pub fn image_id(&self) -> ScMutableUint32 {
		ScMutableUint32::new(self.id, idx_map(IDX_PARAM_IMAGE_ID))
	}
}
