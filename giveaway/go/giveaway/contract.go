// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

package giveaway

import "github.com/iotaledger/wasp/packages/wasmvm/wasmlib/go/wasmlib"

type InitCall struct {
	Func    *wasmlib.ScInitFunc
	Params  MutableInitParams
}

type LoadAddressesCall struct {
	Func    *wasmlib.ScFunc
	Params  MutableLoadAddressesParams
}

type RuffleCall struct {
	Func    *wasmlib.ScFunc
	Params  MutableRuffleParams
	Results ImmutableRuffleResults
}

type SetOwnerCall struct {
	Func    *wasmlib.ScFunc
	Params  MutableSetOwnerParams
}

type UnloadAddressesCall struct {
	Func    *wasmlib.ScFunc
}

type GetOwnerCall struct {
	Func    *wasmlib.ScView
	Results ImmutableGetOwnerResults
}

type Funcs struct{}

var ScFuncs Funcs

func (sc Funcs) Init(ctx wasmlib.ScFuncCallContext) *InitCall {
	f := &InitCall{Func: wasmlib.NewScInitFunc(ctx, HScName, HFuncInit)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(&f.Func.ScView)
	return f
}

func (sc Funcs) LoadAddresses(ctx wasmlib.ScFuncCallContext) *LoadAddressesCall {
	f := &LoadAddressesCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncLoadAddresses)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(&f.Func.ScView)
	return f
}

func (sc Funcs) Ruffle(ctx wasmlib.ScFuncCallContext) *RuffleCall {
	f := &RuffleCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncRuffle)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(&f.Func.ScView)
	wasmlib.NewCallResultsProxy(&f.Func.ScView, &f.Results.proxy)
	return f
}

func (sc Funcs) SetOwner(ctx wasmlib.ScFuncCallContext) *SetOwnerCall {
	f := &SetOwnerCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncSetOwner)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(&f.Func.ScView)
	return f
}

func (sc Funcs) UnloadAddresses(ctx wasmlib.ScFuncCallContext) *UnloadAddressesCall {
	return &UnloadAddressesCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncUnloadAddresses)}
}

func (sc Funcs) GetOwner(ctx wasmlib.ScViewCallContext) *GetOwnerCall {
	f := &GetOwnerCall{Func: wasmlib.NewScView(ctx, HScName, HViewGetOwner)}
	wasmlib.NewCallResultsProxy(f.Func, &f.Results.proxy)
	return f
}
