// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

//nolint:dupl
package giveaway

import "github.com/iotaledger/wasp/packages/wasmvm/wasmlib/go/wasmlib"

var exportMap = wasmlib.ScExportMap{
	Names: []string{
    	FuncInit,
    	FuncLoadAddresses,
    	FuncRuffle,
    	FuncSetOwner,
    	FuncUnloadAddresses,
    	ViewGetOwner,
	},
	Funcs: []wasmlib.ScFuncContextFunction{
    	funcInitThunk,
    	funcLoadAddressesThunk,
    	funcRuffleThunk,
    	funcSetOwnerThunk,
    	funcUnloadAddressesThunk,
	},
	Views: []wasmlib.ScViewContextFunction{
    	viewGetOwnerThunk,
	},
}

func OnLoad(index int32) {
	if index >= 0 {
		wasmlib.ScExportsCall(index, &exportMap)
		return
	}

	wasmlib.ScExportsExport(&exportMap)
}

type InitContext struct {
	Events  giveawayEvents
	Params  ImmutableInitParams
	State   MutablegiveawayState
}

func funcInitThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("giveaway.funcInit")
	f := &InitContext{
		Params: ImmutableInitParams{
			proxy: wasmlib.NewParamsProxy(),
		},
		State: MutablegiveawayState{
			proxy: wasmlib.NewStateProxy(),
		},
	}
	funcInit(ctx, f)
	ctx.Log("giveaway.funcInit ok")
}

type LoadAddressesContext struct {
	Events  giveawayEvents
	Params  ImmutableLoadAddressesParams
	State   MutablegiveawayState
}

func funcLoadAddressesThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("giveaway.funcLoadAddresses")
	f := &LoadAddressesContext{
		Params: ImmutableLoadAddressesParams{
			proxy: wasmlib.NewParamsProxy(),
		},
		State: MutablegiveawayState{
			proxy: wasmlib.NewStateProxy(),
		},
	}

	// current owner of this smart contract
	access := f.State.Owner()
	ctx.Require(access.Exists(), "access not set: owner")
	ctx.Require(ctx.Caller() == access.Value(), "no permission")

	ctx.Require(f.Params.Addresses().Exists(), "missing mandatory addresses")
	funcLoadAddresses(ctx, f)
	ctx.Log("giveaway.funcLoadAddresses ok")
}

type RuffleContext struct {
	Events  giveawayEvents
	Params  ImmutableRuffleParams
	Results MutableRuffleResults
	State   MutablegiveawayState
}

func funcRuffleThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("giveaway.funcRuffle")
	results := wasmlib.NewScDict()
	f := &RuffleContext{
		Params: ImmutableRuffleParams{
			proxy: wasmlib.NewParamsProxy(),
		},
		Results: MutableRuffleResults{
			proxy: results.AsProxy(),
		},
		State: MutablegiveawayState{
			proxy: wasmlib.NewStateProxy(),
		},
	}

	// current owner of this smart contract
	access := f.State.Owner()
	ctx.Require(access.Exists(), "access not set: owner")
	ctx.Require(ctx.Caller() == access.Value(), "no permission")

	ctx.Require(f.Params.NWinners().Exists(), "missing mandatory nWinners")
	funcRuffle(ctx, f)
	ctx.Results(results)
	ctx.Log("giveaway.funcRuffle ok")
}

type SetOwnerContext struct {
	Events  giveawayEvents
	Params  ImmutableSetOwnerParams
	State   MutablegiveawayState
}

func funcSetOwnerThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("giveaway.funcSetOwner")
	f := &SetOwnerContext{
		Params: ImmutableSetOwnerParams{
			proxy: wasmlib.NewParamsProxy(),
		},
		State: MutablegiveawayState{
			proxy: wasmlib.NewStateProxy(),
		},
	}

	// current owner of this smart contract
	access := f.State.Owner()
	ctx.Require(access.Exists(), "access not set: owner")
	ctx.Require(ctx.Caller() == access.Value(), "no permission")

	ctx.Require(f.Params.Owner().Exists(), "missing mandatory owner")
	funcSetOwner(ctx, f)
	ctx.Log("giveaway.funcSetOwner ok")
}

type UnloadAddressesContext struct {
	Events  giveawayEvents
	State   MutablegiveawayState
}

func funcUnloadAddressesThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("giveaway.funcUnloadAddresses")
	f := &UnloadAddressesContext{
		State: MutablegiveawayState{
			proxy: wasmlib.NewStateProxy(),
		},
	}

	// current owner of this smart contract
	access := f.State.Owner()
	ctx.Require(access.Exists(), "access not set: owner")
	ctx.Require(ctx.Caller() == access.Value(), "no permission")

	funcUnloadAddresses(ctx, f)
	ctx.Log("giveaway.funcUnloadAddresses ok")
}

type GetOwnerContext struct {
	Results MutableGetOwnerResults
	State   ImmutablegiveawayState
}

func viewGetOwnerThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("giveaway.viewGetOwner")
	results := wasmlib.NewScDict()
	f := &GetOwnerContext{
		Results: MutableGetOwnerResults{
			proxy: results.AsProxy(),
		},
		State: ImmutablegiveawayState{
			proxy: wasmlib.NewStateProxy(),
		},
	}
	viewGetOwner(ctx, f)
	ctx.Results(results)
	ctx.Log("giveaway.viewGetOwner ok")
}
