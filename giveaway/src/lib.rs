// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

#![allow(dead_code)]
#![allow(unused_imports)]

use giveaway::*;
use wasmlib::*;

use crate::consts::*;
use crate::events::*;
use crate::params::*;
use crate::results::*;
use crate::state::*;

mod consts;
mod contract;
mod events;
mod params;
mod results;
mod state;

mod giveaway;

const EXPORT_MAP: ScExportMap = ScExportMap {
    names: &[
    	FUNC_INIT,
    	FUNC_LOAD_ADDRESSES,
    	FUNC_RUFFLE,
    	FUNC_SET_OWNER,
    	FUNC_UNLOAD_ADDRESSES,
    	VIEW_GET_OWNER,
	],
    funcs: &[
    	func_init_thunk,
    	func_load_addresses_thunk,
    	func_ruffle_thunk,
    	func_set_owner_thunk,
    	func_unload_addresses_thunk,
	],
    views: &[
    	view_get_owner_thunk,
	],
};

#[no_mangle]
fn on_call(index: i32) {
	ScExports::call(index, &EXPORT_MAP);
}

#[no_mangle]
fn on_load() {
    ScExports::export(&EXPORT_MAP);
}

pub struct InitContext {
	events:  giveawayEvents,
	params: ImmutableInitParams,
	state: MutablegiveawayState,
}

fn func_init_thunk(ctx: &ScFuncContext) {
	ctx.log("giveaway.funcInit");
	let f = InitContext {
		events:  giveawayEvents {},
		params: ImmutableInitParams { proxy: params_proxy() },
		state: MutablegiveawayState { proxy: state_proxy() },
	};
	func_init(ctx, &f);
	ctx.log("giveaway.funcInit ok");
}

pub struct LoadAddressesContext {
	events:  giveawayEvents,
	params: ImmutableLoadAddressesParams,
	state: MutablegiveawayState,
}

fn func_load_addresses_thunk(ctx: &ScFuncContext) {
	ctx.log("giveaway.funcLoadAddresses");
	let f = LoadAddressesContext {
		events:  giveawayEvents {},
		params: ImmutableLoadAddressesParams { proxy: params_proxy() },
		state: MutablegiveawayState { proxy: state_proxy() },
	};

	// current owner of this smart contract
	let access = f.state.owner();
	ctx.require(access.exists(), "access not set: owner");
	ctx.require(ctx.caller() == access.value(), "no permission");

	ctx.require(f.params.addresses().exists(), "missing mandatory addresses");
	func_load_addresses(ctx, &f);
	ctx.log("giveaway.funcLoadAddresses ok");
}

pub struct RuffleContext {
	events:  giveawayEvents,
	params: ImmutableRuffleParams,
	results: MutableRuffleResults,
	state: MutablegiveawayState,
}

fn func_ruffle_thunk(ctx: &ScFuncContext) {
	ctx.log("giveaway.funcRuffle");
	let f = RuffleContext {
		events:  giveawayEvents {},
		params: ImmutableRuffleParams { proxy: params_proxy() },
		results: MutableRuffleResults { proxy: results_proxy() },
		state: MutablegiveawayState { proxy: state_proxy() },
	};

	// current owner of this smart contract
	let access = f.state.owner();
	ctx.require(access.exists(), "access not set: owner");
	ctx.require(ctx.caller() == access.value(), "no permission");

	ctx.require(f.params.n_winners().exists(), "missing mandatory nWinners");
	func_ruffle(ctx, &f);
	ctx.results(&f.results.proxy.kv_store);
	ctx.log("giveaway.funcRuffle ok");
}

pub struct SetOwnerContext {
	events:  giveawayEvents,
	params: ImmutableSetOwnerParams,
	state: MutablegiveawayState,
}

fn func_set_owner_thunk(ctx: &ScFuncContext) {
	ctx.log("giveaway.funcSetOwner");
	let f = SetOwnerContext {
		events:  giveawayEvents {},
		params: ImmutableSetOwnerParams { proxy: params_proxy() },
		state: MutablegiveawayState { proxy: state_proxy() },
	};

	// current owner of this smart contract
	let access = f.state.owner();
	ctx.require(access.exists(), "access not set: owner");
	ctx.require(ctx.caller() == access.value(), "no permission");

	ctx.require(f.params.owner().exists(), "missing mandatory owner");
	func_set_owner(ctx, &f);
	ctx.log("giveaway.funcSetOwner ok");
}

pub struct UnloadAddressesContext {
	events:  giveawayEvents,
	state: MutablegiveawayState,
}

fn func_unload_addresses_thunk(ctx: &ScFuncContext) {
	ctx.log("giveaway.funcUnloadAddresses");
	let f = UnloadAddressesContext {
		events:  giveawayEvents {},
		state: MutablegiveawayState { proxy: state_proxy() },
	};

	// current owner of this smart contract
	let access = f.state.owner();
	ctx.require(access.exists(), "access not set: owner");
	ctx.require(ctx.caller() == access.value(), "no permission");

	func_unload_addresses(ctx, &f);
	ctx.log("giveaway.funcUnloadAddresses ok");
}

pub struct GetOwnerContext {
	results: MutableGetOwnerResults,
	state: ImmutablegiveawayState,
}

fn view_get_owner_thunk(ctx: &ScViewContext) {
	ctx.log("giveaway.viewGetOwner");
	let f = GetOwnerContext {
		results: MutableGetOwnerResults { proxy: results_proxy() },
		state: ImmutablegiveawayState { proxy: state_proxy() },
	};
	view_get_owner(ctx, &f);
	ctx.results(&f.results.proxy.kv_store);
	ctx.log("giveaway.viewGetOwner ok");
}
