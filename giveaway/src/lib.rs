// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

#![allow(dead_code)]
#![allow(unused_imports)]

use giveaway::*;
use wasmlib::*;
use wasmlib::host::*;

use crate::consts::*;
use crate::events::*;
use crate::keys::*;
use crate::params::*;
use crate::results::*;
use crate::state::*;

mod consts;
mod contract;
mod events;
mod keys;
mod params;
mod results;
mod state;
mod giveaway;

#[no_mangle]
fn on_load() {
    let exports = ScExports::new();
    exports.add_func(FUNC_INIT,             func_init_thunk);
    exports.add_func(FUNC_LOAD_ADDRESSES,   func_load_addresses_thunk);
    exports.add_func(FUNC_RUFFLE,           func_ruffle_thunk);
    exports.add_func(FUNC_SET_OWNER,        func_set_owner_thunk);
    exports.add_func(FUNC_UNLOAD_ADDRESSES, func_unload_addresses_thunk);
    exports.add_view(VIEW_GET_OWNER,        view_get_owner_thunk);

    unsafe {
        for i in 0..KEY_MAP_LEN {
            IDX_MAP[i] = get_key_id_from_string(KEY_MAP[i]);
        }
    }
}

pub struct InitContext {
	events:  giveawayEvents,
	params: ImmutableInitParams,
	state: MutablegiveawayState,
}

fn func_init_thunk(ctx: &ScFuncContext) {
	ctx.log("giveaway.funcInit");
	let f = InitContext {
		events:  giveawayEvents {},
		params: ImmutableInitParams {
			id: OBJ_ID_PARAMS,
		},
		state: MutablegiveawayState {
			id: OBJ_ID_STATE,
		},
	};
	func_init(ctx, &f);
	ctx.log("giveaway.funcInit ok");
}

pub struct LoadAddressesContext {
	events:  giveawayEvents,
	params: ImmutableLoadAddressesParams,
	state: MutablegiveawayState,
}

fn func_load_addresses_thunk(ctx: &ScFuncContext) {
	ctx.log("giveaway.funcLoadAddresses");

	// current owner of this smart contract
	let access = ctx.state().get_agent_id("owner");
	ctx.require(access.exists(), "access not set: owner");
	ctx.require(ctx.caller() == access.value(), "no permission");

	let f = LoadAddressesContext {
		events:  giveawayEvents {},
		params: ImmutableLoadAddressesParams {
			id: OBJ_ID_PARAMS,
		},
		state: MutablegiveawayState {
			id: OBJ_ID_STATE,
		},
	};
	ctx.require(f.params.addresses().exists(), "missing mandatory addresses");
	func_load_addresses(ctx, &f);
	ctx.log("giveaway.funcLoadAddresses ok");
}

pub struct RuffleContext {
	events:  giveawayEvents,
	params: ImmutableRuffleParams,
	results: MutableRuffleResults,
	state: MutablegiveawayState,
}

fn func_ruffle_thunk(ctx: &ScFuncContext) {
	ctx.log("giveaway.funcRuffle");

	// current owner of this smart contract
	let access = ctx.state().get_agent_id("owner");
	ctx.require(access.exists(), "access not set: owner");
	ctx.require(ctx.caller() == access.value(), "no permission");

	let f = RuffleContext {
		events:  giveawayEvents {},
		params: ImmutableRuffleParams {
			id: OBJ_ID_PARAMS,
		},
		results: MutableRuffleResults {
			id: OBJ_ID_RESULTS,
		},
		state: MutablegiveawayState {
			id: OBJ_ID_STATE,
		},
	};
	ctx.require(f.params.n_winners().exists(), "missing mandatory nWinners");
	func_ruffle(ctx, &f);
	ctx.log("giveaway.funcRuffle ok");
}

pub struct SetOwnerContext {
	events:  giveawayEvents,
	params: ImmutableSetOwnerParams,
	state: MutablegiveawayState,
}

fn func_set_owner_thunk(ctx: &ScFuncContext) {
	ctx.log("giveaway.funcSetOwner");

	// current owner of this smart contract
	let access = ctx.state().get_agent_id("owner");
	ctx.require(access.exists(), "access not set: owner");
	ctx.require(ctx.caller() == access.value(), "no permission");

	let f = SetOwnerContext {
		events:  giveawayEvents {},
		params: ImmutableSetOwnerParams {
			id: OBJ_ID_PARAMS,
		},
		state: MutablegiveawayState {
			id: OBJ_ID_STATE,
		},
	};
	ctx.require(f.params.owner().exists(), "missing mandatory owner");
	func_set_owner(ctx, &f);
	ctx.log("giveaway.funcSetOwner ok");
}

pub struct UnloadAddressesContext {
	events:  giveawayEvents,
	state: MutablegiveawayState,
}

fn func_unload_addresses_thunk(ctx: &ScFuncContext) {
	ctx.log("giveaway.funcUnloadAddresses");

	// current owner of this smart contract
	let access = ctx.state().get_agent_id("owner");
	ctx.require(access.exists(), "access not set: owner");
	ctx.require(ctx.caller() == access.value(), "no permission");

	let f = UnloadAddressesContext {
		events:  giveawayEvents {},
		state: MutablegiveawayState {
			id: OBJ_ID_STATE,
		},
	};
	func_unload_addresses(ctx, &f);
	ctx.log("giveaway.funcUnloadAddresses ok");
}

pub struct GetOwnerContext {
	results: MutableGetOwnerResults,
	state: ImmutablegiveawayState,
}

fn view_get_owner_thunk(ctx: &ScViewContext) {
	ctx.log("giveaway.viewGetOwner");
	let f = GetOwnerContext {
		results: MutableGetOwnerResults {
			id: OBJ_ID_RESULTS,
		},
		state: ImmutablegiveawayState {
			id: OBJ_ID_STATE,
		},
	};
	view_get_owner(ctx, &f);
	ctx.log("giveaway.viewGetOwner ok");
}
