// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

#![allow(dead_code)]
#![allow(unused_imports)]

use wasmlib::*;
use wasmlib::host::*;

use crate::*;
use crate::keys::*;

#[derive(Clone, Copy)]
pub struct ArrayOfImmutableString {
	pub(crate) obj_id: i32,
}

impl ArrayOfImmutableString {
    pub fn length(&self) -> i32 {
        get_length(self.obj_id)
    }

    pub fn get_string(&self, index: i32) -> ScImmutableString {
        ScImmutableString::new(self.obj_id, Key32(index))
    }
}

#[derive(Clone, Copy)]
pub struct ImmutablegiveawayState {
    pub(crate) id: i32,
}

impl ImmutablegiveawayState {
    pub fn addresses(&self) -> ArrayOfImmutableString {
		let arr_id = get_object_id(self.id, idx_map(IDX_STATE_ADDRESSES), TYPE_ARRAY | TYPE_STRING);
		ArrayOfImmutableString { obj_id: arr_id }
	}

    pub fn owner(&self) -> ScImmutableAgentID {
		ScImmutableAgentID::new(self.id, idx_map(IDX_STATE_OWNER))
	}
}

#[derive(Clone, Copy)]
pub struct ArrayOfMutableString {
	pub(crate) obj_id: i32,
}

impl ArrayOfMutableString {
    pub fn clear(&self) {
        clear(self.obj_id);
    }

    pub fn length(&self) -> i32 {
        get_length(self.obj_id)
    }

    pub fn get_string(&self, index: i32) -> ScMutableString {
        ScMutableString::new(self.obj_id, Key32(index))
    }
}

#[derive(Clone, Copy)]
pub struct MutablegiveawayState {
    pub(crate) id: i32,
}

impl MutablegiveawayState {
    pub fn as_immutable(&self) -> ImmutablegiveawayState {
		ImmutablegiveawayState { id: self.id }
	}

    pub fn addresses(&self) -> ArrayOfMutableString {
		let arr_id = get_object_id(self.id, idx_map(IDX_STATE_ADDRESSES), TYPE_ARRAY | TYPE_STRING);
		ArrayOfMutableString { obj_id: arr_id }
	}

    pub fn owner(&self) -> ScMutableAgentID {
		ScMutableAgentID::new(self.id, idx_map(IDX_STATE_OWNER))
	}
}
