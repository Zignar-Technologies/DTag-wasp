// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

#![allow(dead_code)]
#![allow(unused_imports)]

use wasmlib::*;
use wasmlib::host::*;

use crate::*;
use crate::keys::*;

#[derive(Clone, Copy)]
pub struct ImmutableInitParams {
    pub(crate) id: i32,
}

impl ImmutableInitParams {
    pub fn owner(&self) -> ScImmutableAgentID {
		ScImmutableAgentID::new(self.id, idx_map(IDX_PARAM_OWNER))
	}
}

#[derive(Clone, Copy)]
pub struct MutableInitParams {
    pub(crate) id: i32,
}

impl MutableInitParams {
    pub fn owner(&self) -> ScMutableAgentID {
		ScMutableAgentID::new(self.id, idx_map(IDX_PARAM_OWNER))
	}
}

#[derive(Clone, Copy)]
pub struct ImmutableLoadAddressesParams {
    pub(crate) id: i32,
}

impl ImmutableLoadAddressesParams {
    pub fn addresses(&self) -> ScImmutableString {
		ScImmutableString::new(self.id, idx_map(IDX_PARAM_ADDRESSES))
	}
}

#[derive(Clone, Copy)]
pub struct MutableLoadAddressesParams {
    pub(crate) id: i32,
}

impl MutableLoadAddressesParams {
    pub fn addresses(&self) -> ScMutableString {
		ScMutableString::new(self.id, idx_map(IDX_PARAM_ADDRESSES))
	}
}

#[derive(Clone, Copy)]
pub struct ImmutableRuffleParams {
    pub(crate) id: i32,
}

impl ImmutableRuffleParams {
    pub fn n_winners(&self) -> ScImmutableInt16 {
		ScImmutableInt16::new(self.id, idx_map(IDX_PARAM_N_WINNERS))
	}
}

#[derive(Clone, Copy)]
pub struct MutableRuffleParams {
    pub(crate) id: i32,
}

impl MutableRuffleParams {
    pub fn n_winners(&self) -> ScMutableInt16 {
		ScMutableInt16::new(self.id, idx_map(IDX_PARAM_N_WINNERS))
	}
}

#[derive(Clone, Copy)]
pub struct ImmutableSetOwnerParams {
    pub(crate) id: i32,
}

impl ImmutableSetOwnerParams {
    pub fn owner(&self) -> ScImmutableAgentID {
		ScImmutableAgentID::new(self.id, idx_map(IDX_PARAM_OWNER))
	}
}

#[derive(Clone, Copy)]
pub struct MutableSetOwnerParams {
    pub(crate) id: i32,
}

impl MutableSetOwnerParams {
    pub fn owner(&self) -> ScMutableAgentID {
		ScMutableAgentID::new(self.id, idx_map(IDX_PARAM_OWNER))
	}
}
